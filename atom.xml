<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2013-12-28T23:00:14+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初探 MFC]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc/"/>
    <updated>2013-12-28T22:13:34+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc</id>
    <content type="html"><![CDATA[<p>这几天要写智能卡大作业，老师要求必须有图形界面。
作业本身没什么难的，调用提供的API函数完成相应功能。倒是图形界面让我觉得比较有趣，以前一直用java写图形界面。但是java程序运行起来比较麻烦，首先得有jre，其次jar也不一定能双击运行，当时就萌生了写个MFC程序的念头，囿于时间有限一直没学习。这次倒是给了我一个大好机会。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#pragma once
</span><span class='line'>
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;Windows.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class CardManager {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>
</span><span class='line'>  enum DATA_T {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      PUBLISHER, 
</span><span class='line'>
</span><span class='line'>      CARD_ID, 
</span><span class='line'>
</span><span class='line'>      USER_NAME, 
</span><span class='line'>
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>
</span><span class='line'>  const short PUBLISHER_ADDR = 0x30;
</span><span class='line'>
</span><span class='line'>  const short PUBLISHER_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short CARD_ID_ADDR =
</span><span class='line'>
</span><span class='line'>      PUBLISHER_ADDR + PUBLISHER_LEN;
</span><span class='line'>
</span><span class='line'>  const short CARD_ID_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short USER_NAME_ADDR =
</span><span class='line'>
</span><span class='line'>      CARD_ID_ADDR + CARD_ID_LEN;
</span><span class='line'>
</span><span class='line'>  const short USER_NAME_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_ADDR =
</span><span class='line'>
</span><span class='line'>      USER_NAME_ADDR + USER_NAME_LEN;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_LEN = 0x04; //sizeof(float)
</span><span class='line'>
</span><span class='line'>  const short BALANCE_BUF_ADDR =
</span><span class='line'>
</span><span class='line'>      BALANCE_ADDR + BALANCE_LEN;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_BUF_LEN = BALANCE_LEN;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  HANDLE m_icdev;
</span><span class='line'>
</span><span class='line'>  bool m_passwdChecked;
</span><span class='line'>
</span><span class='line'>  void(*noPasswdFunc)(void);
</span><span class='line'>
</span><span class='line'>  void(*notInitFunc)(void);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline bool passWordConfirm()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      if (noPasswdFunc && !m_passwdChecked) {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          noPasswdFunc();
</span><span class='line'>
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return m_passwdChecked;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  inline bool initConfirm()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      if (notInitFunc && !m_icdev) {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          notInitFunc();
</span><span class='line'>
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return m_icdev != 0;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  bool writeBalance(float num);
</span><span class='line'>
</span><span class='line'>  bool writeInfo(DATA_T info_type, 
</span><span class='line'>
</span><span class='line'>                 const std::string& data);
</span><span class='line'>
</span><span class='line'>  float getBuffer();
</span><span class='line'>
</span><span class='line'>  bool writeBuffer(float balance);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  static unsigned char *float2bytes(float num);
</span><span class='line'>
</span><span class='line'>  static float bytes2float(unsigned char* bytes);
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>
</span><span class='line'>  CardManager();
</span><span class='line'>
</span><span class='line'>  virtual ~CardManager();
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline bool isInited()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      return m_icdev != 0;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline void setNoPasswdCallBack(void(*callBack)(void))
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      noPasswdFunc = callBack;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  inline void setNotInitCallBack(void(*callback)(void))
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      notInitFunc = callback;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  1 for init device error
</span><span class='line'>
</span><span class='line'>  2 for no card
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int init(int port,  long baud);
</span><span class='line'>
</span><span class='line'>  bool disConnect();
</span><span class='line'>
</span><span class='line'>  int getInfo(DATA_T data_type,  std::string& out);
</span><span class='line'>
</span><span class='line'>  bool checkPassWd(const unsigned char* key);
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int release(float initialBalance);
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int consume(float costs);
</span><span class='line'>
</span><span class='line'>  float getBalance();
</span><span class='line'>
</span><span class='line'>  int charge(float amount);
</span><span class='line'>
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shana]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/27/shana/"/>
    <updated>2013-12-27T20:22:33+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/27/shana</id>
    <content type="html"><![CDATA[<p><video controls>
<source src="http://LanderlYoung.github.io/assets/media/shana_Final_FinalED.mp4" type="video/mp4"/>
This is no suitable format of video for your browser!
</video></p>
]]></content>
  </entry>
  
</feed>
