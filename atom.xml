<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-02-20T16:08:01+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-版本v1.0]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0/"/>
    <updated>2014-02-19T18:31:45+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>这个小工具需要的功能有以下几个：</p>

<ul>
<li>解析命令行参数</li>
<li>发送http请求并取得返回的xml <!--more--></li>
<li>解析xml并得到单词的解释</li>
<li>输出结果</li>
</ul>


<p>最后还有一个，不过在v1.0中没有加入：</p>

<ul>
<li>发送http请求，获得单词发音，并播放出来</li>
</ul>


<p>下面一部分一部分的把各个功能实现说明一下：</p>

<h3>1.解析命令行参数</h3>

<p>这里的重点是获取命令行参数，在Node.js里面命令行参数可以从<code>process.argv</code>获取。
得到的是一个string数组，数组的第一项是node解释器的调用名，一般是<code>node</code>;第二项是js脚本的绝对路径，后面的各项就是传进去的命令行参数。于是得到下面的解析命令行参数的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//command line arguments</span>
</span><span class='line'><span class="n">var</span> <span class="n">argv</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">argv</span><span class="p">.</span><span class="n">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">function</span><span class="p">(){</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">argv</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">argv</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">usage</span><span class="p">();</span>
</span><span class='line'> <span class="n">process</span><span class="p">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">argv</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">word</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'> <span class="n">var</span> <span class="n">swt</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'> <span class="n">word</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span> <span class="n">swt</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="o">/</span><span class="n">e</span><span class="o">|</span><span class="n">E</span><span class="o">/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">ee</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span> <span class="n">swt</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="o">/</span><span class="n">p</span><span class="o">|</span><span class="n">P</span><span class="o">/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">pnc</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span> <span class="n">swt</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="o">/</span><span class="n">v</span><span class="o">/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">ee</span> <span class="o">=</span> <span class="n">cc</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">swt</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="o">/</span><span class="n">V</span><span class="o">/</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">pnc</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'> <span class="n">ee</span> <span class="o">=</span> <span class="n">cc</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.发送http请求并取得返回的xml</h3>

<p>说到这个话题，最先想到的是AJAX，不过在Node.js里面对http request 有另一种封装。</p>

<p>代码中的 http 来自于源代码最前面的 <code>var  http = require("http");</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">var</span> <span class="n">req</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">queryURL</span><span class="p">,</span>  <span class="n">function</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">chunks</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">res</span><span class="p">.</span><span class="n">on</span><span class="p">(</span><span class="err">&#39;</span><span class="n">data</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">trunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">length</span> <span class="o">+=</span> <span class="n">trunk</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>          <span class="n">chunks</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">trunk</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="n">res</span><span class="p">.</span><span class="n">on</span><span class="p">(</span><span class="err">&#39;</span><span class="n">end</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buffer</span><span class="p">(</span><span class="n">length</span><span class="p">),</span>
</span><span class='line'>          <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="n">l</span> <span class="o">=</span> <span class="n">chunks</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">chunks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">copy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pos</span> <span class="o">+=</span> <span class="n">chunks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">res</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">//TODO</span>
</span><span class='line'>          <span class="c1">//console.log(data.toString());</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">output</span> <span class="o">=</span> <span class="n">genOutput</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">toString</span><span class="p">());</span>
</span><span class='line'>          <span class="n">show</span><span class="p">(</span><span class="n">output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="n">res</span><span class="p">.</span><span class="n">on</span><span class="p">(</span><span class="err">&#39;</span><span class="n">error</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">err</span><span class="p">){</span>
</span><span class='line'>              <span class="c1">//FIXME</span>
</span><span class='line'>              <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="s">&quot;requesr error&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">req</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面主要做事的是三个回调函数，分别是当得到数据、数据下载结束、发生错误。代码所做的事是，把每次得到的数据缓存起来；当数据下载结束时把缓存的数据拼接起来。需要说明的是：在代码中用到了Node.js的Buffer类，其中on &lsquo;data&rsquo; 时的回调函数的参数就是Buffer类的实例。在一开始出现的问题是：设置了返回的xml的编码，然后就出现了乱码，猜测原因是每次on &lsquo;data&rsquo; 时传来的数据段把utf-8编码截断了。解决方法是先把返回数据当成二进制来处理，最后拼接起来再转成字符串。</p>

<h3>3.解析xml</h3>

<p>在浏览器下的javascript解析xml是原生支持的，不过在Node.js里面就要依赖于第三方的扩展库了。这里解析xml我选择了xmlreader库。安装方式相当简单<code>npm install xmlreader</code>就能把xmlreader安装到当前目录下。使用该xml库解析xml也是相当简单的。还是先上代码吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">function</span> <span class="n">genOutput</span><span class="p">(</span><span class="n">xml</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="n">xmlreader</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">xml</span><span class="p">,</span> <span class="n">function</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="k">return</span> <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">var</span> <span class="n">basic</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">yodaodict</span><span class="p">.</span><span class="n">basic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">basic</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">basic</span><span class="p">.</span><span class="n">count</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">expand</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">//english chinese --default</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">type</span> <span class="o">=</span> <span class="n">basic</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">type</span><span class="p">.</span><span class="n">text</span><span class="p">().</span><span class="n">toLowerCase</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="err">&#39;</span><span class="n">ec</span><span class="err">&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">cc</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>              <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="err">&#39;</span><span class="n">ee</span><span class="err">&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ee</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>              <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="err">&#39;</span><span class="n">ce</span><span class="err">&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">cc</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">res</span><span class="p">.</span><span class="n">push</span><span class="p">({</span>
</span><span class='line'><span class="n">type</span> <span class="o">:</span> <span class="n">basic</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">name</span><span class="p">.</span><span class="n">text</span><span class="p">(),</span>
</span><span class='line'><span class="n">word</span> <span class="o">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>          <span class="n">expand</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">expand</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//console.log(res[res.length - 1].type);</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">xword</span> <span class="o">=</span> <span class="n">basic</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="err">&#39;</span><span class="n">authoritative</span><span class="o">-</span><span class="n">dict</span><span class="err">&#39;</span><span class="p">].</span><span class="n">word</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xword</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="n">word</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">res</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">word</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="n">var</span> <span class="n">word_c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">word_c</span> <span class="o">&lt;</span> <span class="n">xword</span><span class="p">.</span><span class="n">count</span><span class="p">();</span> <span class="n">word_c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">word</span><span class="p">.</span><span class="n">push</span><span class="p">(</span> <span class="p">{</span> <span class="n">type</span> <span class="o">:</span> <span class="err">&#39;&#39;</span><span class="p">,</span> <span class="n">trs</span> <span class="o">:</span> <span class="p">[]});</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="n">xtrs</span> <span class="o">=</span> <span class="n">xword</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">word_c</span><span class="p">).</span><span class="n">trs</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xtrs</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">var</span> <span class="n">trs</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">trs</span><span class="p">;</span>
</span><span class='line'>      <span class="n">trs</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">type</span> <span class="o">:</span> <span class="err">&#39;&#39;</span><span class="p">,</span> <span class="n">exp</span> <span class="o">:</span> <span class="p">[]});</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">trs</span><span class="p">[</span><span class="n">trs</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">exp</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">var</span> <span class="n">trs_c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">trs_c</span> <span class="o">&lt;</span> <span class="n">xtrs</span><span class="p">.</span><span class="n">count</span><span class="p">();</span> <span class="n">trs_c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">xtrs</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">trs_c</span><span class="p">).</span><span class="n">pos</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">trs</span><span class="p">[</span><span class="n">trs</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">type</span> <span class="o">=</span> <span class="n">xtrs</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">trs_c</span><span class="p">).</span><span class="n">pos</span><span class="p">.</span><span class="n">text</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">var</span> <span class="n">xtr</span> <span class="o">=</span> <span class="n">xtrs</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">trs_c</span><span class="p">).</span><span class="n">tr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xtr</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span> <span class="n">var</span> <span class="n">tr_c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">tr_c</span> <span class="o">&lt;</span> <span class="n">xtr</span><span class="p">.</span><span class="n">count</span><span class="p">();</span> <span class="n">tr_c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">exp</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">xtr</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">tr_c</span><span class="p">).</span><span class="n">l</span><span class="p">.</span><span class="n">i</span><span class="p">.</span><span class="n">text</span><span class="p">());</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//console.log(basic.at(i).name.text());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面回调函数的参数就是遍历xml的关键，其相当与整个xml的父节点。在xmlreader库中，获取字节点只需要使用<code>.</code>即可取得，比如html有个字节点body可以使用html.body来取得body节点。对于每个节点有几个方法，text()是获取该节点内的文本内容。如果某一父节点有多个相同标签的字节点，那么就要用count和at来取得每一个字节点。还有一个attributes（）方法来获取标签内的属性。</p>

<h3>4.输出结果</h3>

<p>没什么好解释的，使用<code>console.log</code>输出。值得说明的只是bash的文本显示格式，bash可以控制文字的颜色，和样式（包括：正常，下划线，加粗等）。使用方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">RED</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[1;31m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">GREEN</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[1;32m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">DEFAULT</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[0;49m&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOLD</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[1m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">UNDERLINE</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[4m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NORMAL</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\033</span><span class="s">[m&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span><span class="p">(</span><span class="err">&#39;</span>  <span class="err">&#39;</span> <span class="o">+</span> <span class="n">GREEN</span> <span class="o">+</span> <span class="n">BOLD</span> <span class="o">+</span> <span class="n">trs</span><span class="p">[</span><span class="n">trs_c</span><span class="p">].</span><span class="n">type</span> <span class="o">+</span> <span class="n">NORMAL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>即将添加到V2.0中的新功能</h3>

<ul>
<li>可以实现异步发音</li>
</ul>


<p>即发音和词典显示分两个进程进行，不会因为发音文件硕大影响单词显示速度，进而产生阻塞感。</p>

<p>预计实现方式，是使用Node.js的http request下载下来发音的mp3文件，放到临时文件中，使用ffplay或其他工具播放，然后删除掉mp3文件。</p>

<p>如果可能的话不是用ffplay，而是使用ffmpeg库开发一个mp3播放小程序，增强可移植行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux fork和exec系列函数]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/13/linux-forkhe-execxi-lie-han-shu/"/>
    <updated>2014-01-13T00:31:29+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/13/linux-forkhe-execxi-lie-han-shu</id>
    <content type="html"><![CDATA[<p>linux 中的<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">fork</a>和<a href="http://en.wikipedia.org/wiki/Exec_(operating_system)">exec</a>函数是进程相关的两个函数，最早在大二的操作系统课上了解到。今天要写个小东西偶尔用到就研究了一下。</p>

<h2>1.fork</h2>

<p>fork的功能是创建一个和进程完全一样的子进程。完全的意思是指子进程的堆和栈和父进程是完全相同的。在子进程创建完成时，子进程和父进程共享内存。但是一旦共享的内存区域要被写入时（不管是父进程要写还是子进程要写）这块区域就会从父进程的进程空间复制到子进程，然后再执行写入。这就是通常说的<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">copy on write</a>，目的很明显，就是要节省不必要的内存消耗 。</p>

<!--more-->


<p>这一点在安卓的虚拟机孵化进程zygote被使用，zygote在开机时就把所有系统java类的字节码加载到内存，当一个app启动时zygote就fork一下然后fork的子进程去执行app。这样所有app可以调用系统class而整个系统的内存中只有一份系统类，可以很大程度的节省内存, 同时也加快了app的启动。</p>

<p>linux系统中的所有进程都是init进程fork出来的，查看的话可以发现他的pid是1, 是系统内所有进程的父进程（或者祖先进程）。其实init也有个pid为0的父进程，开机完成后就不存在了，本文不涉及这方面。</p>

<p>fork包含在&lt;unistd.h>头文件中， 其原型是：<code>pid_t fork(void)</code>其中pid_t是进程pid的数据结构，可以被cast成int等类型，当frok成功时在父进程中的返回值是子进程的pid, 子进程中是0, 若没能创建子进程则返回负值。</p>

<p>写个小程序看看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span><span class="c1">//for exit()</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent pid:%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// pid != 0, in parent process</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;in parent child pid:%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//in child process</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I</span><span class="se">\&#39;</span><span class="s">m Child process.</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;My pid :%d, parent pid:%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">getpid</span><span class="p">(),</span> <span class="n">getppid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译运行看看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="n">gcc</span> <span class="n">f</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">f</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="p">.</span><span class="o">/</span><span class="n">f</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span><span class="mi">8627</span>
</span><span class='line'><span class="n">in</span> <span class="n">parent</span> <span class="n">child</span> <span class="nl">pid:</span><span class="mi">8628</span>
</span><span class='line'><span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">Child</span> <span class="n">process</span><span class="p">.</span>
</span><span class='line'><span class="n">My</span> <span class="n">pid</span> <span class="o">:</span><span class="mi">8628</span><span class="p">,</span>  <span class="n">parent</span> <span class="nl">pid:</span><span class="mi">8627</span>
</span></code></pre></td></tr></table></div></figure>


<p>getpid()返回当前进程的pid，getppid（）返回父进程的pid。</p>

<p>这里在fork之后通过返回值知道自己是父进程还是子进程，然后通过if判断进行流程控制，父、子进程各自执行自己的任务。</p>

<h2>2.exec系列函数</h2>

<p>刚才说道linux系统内所有进程都是init进程的子孙进程，但是可能会让人不解：“这样的话所有进程不都是一样的吗”。这里我们要用到exec系列函数了。</p>

<p>exec系列函数在执行时会首先清空当前进程（调用exec函数的进程）的栈和堆等内存空间。然后创建新的空间。但是进程的pid和父进程等信息不会变。</p>

<p>exec系列函数有一下几个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">execl</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">arg0</span><span class="p">,</span>  <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">execle</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">arg0</span><span class="p">,</span>  <span class="p">...,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">envp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">execlp</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">arg0</span><span class="p">,</span>  <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">execv</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">execve</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">envp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">execvp</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>  <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出来他们的后缀不一样，各个后缀的含义是：</p>

<pre>
e - 给函数传入一个环境变量`environment virables`来搜索可执行文件
l - 命令的参数通过函数的参数一一传入`list`方式
p - 使用系统环境变量PATH搜索可执行文件
v - 命令的参数通过一个数组`vector`传入
</pre>


<p>需要说明的是：</p>

<ol>
<li>如果使用带<code>l</code>的函数，即execl、execle、execlp应该在参数列表最后传入一个NULL标记参数完毕。</li>
<li>如果是带v的函数就应该在数组的最后一项设置成NULL标记数组的完毕。</li>
<li>并且arg0（就是第一个参数）通常情况下都是可执行文件自身的名字，否则可能会导致函数调用失败，<a name="list"></a>当然也有特例，为了行文通畅，放到<a href="#appendix"> 最后</a>再说。</li>
<li> 如果使用带有e的函数那么环境变量数组envp的最后也要有NULL标记数组的结束。</li>
<li>实验证明对于带有e的函数在传入正确的envp的前提下还要写对正确的路径，否则不能执行。</li>
</ol>


<p>函数返回0表示正常。</p>

<p>写个小程序试试看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;process pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>  <span class="n">execlp</span><span class="p">(</span><span class="s">&quot;./child&quot;</span><span class="p">,</span> <span class="s">&quot;child&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="p">.</span><span class="o">/</span><span class="n">a</span>
</span><span class='line'><span class="n">process</span> <span class="nl">pid:</span> <span class="mi">12369</span>
</span><span class='line'><span class="nl">pid:</span> <span class="mi">12369</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行了<code>./child</code>命令，第一行输出是原进程的输出，第二行输出是新进程（不是子进程）child的输出，注意printf没有执行。那是因为exec函数执行是清理了当强进程的内存空间整个进程可以说是直接换成了child进程。这个child是一个小程序，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这段代码我们也可以证明，<strong>exec创建的进程和调用进程pid一样</strong>。</p>

<p>然后我们写个程序测试并说明上述所有exec函数的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">m_argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">envp</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;/usr/bin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;/bin&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">){</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;1&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execl pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;2&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execle pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execle</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;3&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execlp pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execlp</span><span class="p">(</span><span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;Hello world&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;4&#39;</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execv pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execv</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="n">m_argv</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;5&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execve pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execve</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="n">m_argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;from execvp pid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>              <span class="n">execvp</span><span class="p">(</span><span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="n">m_argv</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译执行看看能不能出来结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="k">for</span> <span class="p">((</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">));</span><span class="k">do</span> <span class="p">.</span><span class="o">/</span><span class="n">exec_test</span> <span class="err">$</span><span class="n">i</span><span class="p">;</span> <span class="n">echo</span> <span class="p">;</span><span class="n">done</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11046</span>
</span><span class='line'><span class="n">from</span> <span class="n">execl</span> <span class="nl">pid:</span> <span class="mi">11047</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11048</span>
</span><span class='line'><span class="n">from</span> <span class="n">execle</span> <span class="nl">pid:</span> <span class="mi">11049</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11050</span>
</span><span class='line'><span class="n">from</span> <span class="n">execlp</span> <span class="nl">pid:</span> <span class="mi">11051</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11052</span>
</span><span class='line'><span class="n">from</span> <span class="n">execv</span> <span class="nl">pid:</span> <span class="mi">11053</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span> <span class="n">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11054</span>
</span><span class='line'><span class="n">from</span> <span class="n">execve</span> <span class="nl">pid:</span> <span class="mi">11055</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span> <span class="n">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">parent</span> <span class="nl">pid:</span> <span class="mi">11056</span>
</span><span class='line'><span class="n">from</span> <span class="n">execvp</span> <span class="nl">pid:</span> <span class="mi">11057</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span> <span class="n">Hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<p>共六个hello world，虽然有点乱，不过也是没办法的事，谁让人家来自不同进程呢！想想也够吊的，六个hello world来六个自不同进程。</p>

<p>这里也展示了<strong>如何开启一个进程</strong>，就是fork之后在子进程执行exec。</p>

<h2>3.附录</h2>

<p><a name="appendix"></a>
在<a href="#list">上面</a>说到arg0和可执行文件名不一样的情况。比如大家读知道的busybox就这一个例子。</p>

<p>在c/c++语言中main函数想使用命令行参数的话就得使用下面的声明方式：</p>

<pre>
int main(int argc, char *argv[])
</pre>


<p>在程序执行是，argc至少是1, 所以argv<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">0</a>始终有值，他就是程序调用的可执行文件的名字。比如ls命令他的argv<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">0</a>始终都是“ls“。不妨写个程序测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译执行，请看仔细：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="n">make</span> <span class="n">name</span>
</span><span class='line'><span class="n">cc</span>     <span class="n">name</span><span class="p">.</span><span class="n">c</span>   <span class="o">-</span><span class="n">o</span> <span class="n">name</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="p">.</span><span class="o">/</span><span class="n">name</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">name</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">name</span> <span class="n">some</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="p">.</span><span class="o">/</span><span class="n">some</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">some</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">young</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">name</span>
</span><span class='line'><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">young</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">name</span>
</span><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span><span class="p">..</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">name</span>
</span><span class='line'><span class="p">..</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>想必你已经看明白了，我也不用多解释了。当我们使用软链接时，argv<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">0</a>的名字就是软链接的名字。busybox就是对自身设置了好多软链接比如:<code>ln -s busybox ls</code>这样再调用ls时，argv<a href="http://en.wikipedia.org/wiki/Fork_(system_call)">0</a>就是”ls“这样就能知道用户的目的然后执行ls的功能。</p>

<p>最后在写个程序测试一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">execlp</span><span class="p">(</span><span class="s">&quot;busybox&quot;</span><span class="p">,</span> <span class="s">&quot;busybox&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fork</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//arg0 和可执行文件名不一样</span>
</span><span class='line'>      <span class="n">execlp</span><span class="p">(</span><span class="s">&quot;busybox&quot;</span><span class="p">,</span> <span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;-l&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">busy</span><span class="err">$</span><span class="n">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">1998</span><span class="o">-</span><span class="mi">2011</span> <span class="n">Erik</span> <span class="n">Andersen</span><span class="p">,</span>  <span class="n">Rob</span> <span class="n">Landley</span><span class="p">,</span>  <span class="n">Denys</span> <span class="n">Vlasenko</span>
</span><span class='line'><span class="n">and</span> <span class="n">others</span><span class="p">.</span> <span class="n">Licensed</span> <span class="n">under</span> <span class="n">GPLv2</span><span class="p">.</span>
</span><span class='line'><span class="n">See</span> <span class="n">source</span> <span class="n">distribution</span> <span class="k">for</span> <span class="n">full</span> <span class="n">notice</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Usage:</span> <span class="n">busybox</span> <span class="p">[</span><span class="n">function</span><span class="p">]</span> <span class="p">[</span><span class="n">arguments</span><span class="p">]...</span>
</span><span class='line'>   <span class="nl">or:</span> <span class="n">busybox</span> <span class="o">--</span><span class="n">list</span><span class="p">[</span><span class="o">-</span><span class="n">full</span><span class="p">]</span>
</span><span class='line'>   <span class="nl">or:</span> <span class="n">busybox</span> <span class="o">--</span><span class="n">install</span> <span class="p">[</span><span class="o">-</span><span class="n">s</span><span class="p">]</span> <span class="p">[</span><span class="n">DIR</span><span class="p">]</span>
</span><span class='line'>   <span class="nl">or:</span> <span class="n">function</span> <span class="p">[</span><span class="n">arguments</span><span class="p">]...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BusyBox</span> <span class="n">is</span> <span class="n">a</span> <span class="n">multi</span><span class="o">-</span><span class="n">call</span> <span class="n">binary</span> <span class="n">that</span> <span class="n">combines</span> <span class="n">many</span> <span class="n">common</span> <span class="n">Unix</span>
</span><span class='line'>  <span class="n">utilities</span> <span class="n">into</span> <span class="n">a</span> <span class="n">single</span> <span class="n">executable</span><span class="p">.</span>  <span class="n">Most</span> <span class="n">people</span> <span class="n">will</span> <span class="n">create</span> <span class="n">a</span>
</span><span class='line'>                  <span class="err">…………</span>
</span><span class='line'>  <span class="n">cttyhack</span><span class="p">,</span>  <span class="n">cut</span><span class="p">,</span>  <span class="n">date</span><span class="p">,</span>  <span class="n">dc</span><span class="p">,</span>  <span class="o">-</span><span class="n">rwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>    <span class="mi">1</span> <span class="n">young</span>    <span class="n">young</span>       <span class="mi">697656</span> <span class="n">Jan</span> <span class="mi">13</span> <span class="mo">03</span><span class="o">:</span><span class="mi">29</span> <span class="n">busybox</span>
</span><span class='line'><span class="n">dd</span><span class="p">,</span>  <span class="o">-</span><span class="n">rwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span>    <span class="mi">1</span> <span class="n">young</span>    <span class="n">young</span>         <span class="mi">6935</span> <span class="n">Jan</span> <span class="mi">13</span> <span class="mo">03</span><span class="o">:</span><span class="mi">35</span> <span class="n">t</span>
</span><span class='line'><span class="n">deallocvt</span><span class="p">,</span>  <span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>    <span class="mi">1</span> <span class="n">young</span>    <span class="n">young</span>          <span class="mi">476</span> <span class="n">Jan</span> <span class="mi">13</span> <span class="mo">03</span><span class="o">:</span><span class="mi">35</span> <span class="n">t</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">depmod</span><span class="p">,</span>  <span class="n">df</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>    <span class="mi">1</span> <span class="n">young</span>    <span class="n">young</span>            <span class="mi">0</span> <span class="n">Jan</span> <span class="mi">13</span> <span class="mo">03</span><span class="o">:</span><span class="mi">30</span> <span class="o">??</span>
</span><span class='line'><span class="p">,</span>  <span class="n">diff</span><span class="p">,</span>
</span><span class='line'>                  <span class="err">…………</span>
</span></code></pre></td></tr></table></div></figure>


<p>busybox 的输出太长了，我删掉了一部分并用省略号标记。可以看到ls的输出（夹杂在busybox之间，因为是两个进程的输出）。</p>

<p>大功告成，没想到好好写一篇博客需要3个小时！！！困死我了，怒睡！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux触摸板自然滚动]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/12/linuxchong-mo-ban-zi-ran-gun-dong/"/>
    <updated>2014-01-12T20:11:36+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/12/linuxchong-mo-ban-zi-ran-gun-dong</id>
    <content type="html"><![CDATA[<p>触摸板的自然滚动最早是乔帮主发明的。</p>

<p>所谓自然滚动是指触摸板双指滚动的功能，当用两个手指向上滑动触摸板时，屏幕向上滚动，当双指向下化时，屏幕向下滚动。若是反过来就和鼠标一样了。自然滚动让人觉是得在用爽指控制屏幕而不是在控制触摸板。</p>

<p>开始觉得反人类，谁知道用习惯了才知道那真的很爽！爽到不想再用鼠标了。但是在linux系统里面触摸板还不是自然滚动。</p>

<!--more-->


<p>我是synaptics的触摸板，方法一对其他触摸板不见得管用。如果不是synaptics的触摸板貌似也有利用xorg来改的方法，在文章后面再介绍。</p>

<h3>1. synaptics 触摸板</h3>

<p>首先要安装synapclient的驱动：<code>xserver-xorg-input-synaptics</code>。
其实在大多数linux系统内都已经默认按装了。</p>

<pre>
sudo apt-get install xserver-xorg-input-synaptics
</pre>


<p>然后你可以用两个命令来设置垂直滚动和水平滚动的<code>速度</code>:</p>

<pre>
synclient VertScrollDelta=-103
synclient HorizScrollDelta=-103
</pre>


<p>这里把速度设置成负值意思就是让触摸板按照与原来方向的相反方向移动。需要说明的是数值的绝对值越大滚动越慢。</p>

<p>然后我们就达到目的了。为了让这两个命令开机的之后就能自动执行可以</p>

<ol>
<li>把他们加到home目录里的<code>.bashrc</code>文件里。</li>
<li>或者在<code>/etc/profile.d/</code>里面创建一个脚本，比如我建立的是<br/>
<code>/etc/profile.d/synaptics\_natural\_scrolling.sh</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">###################################################################</span>
</span><span class='line'><span class="cp"># File Name:     /etc/profile.d/synaptics_natural_scrolling.sh</span>
</span><span class='line'><span class="cp"># Author:            Landerl Young</span>
</span><span class='line'><span class="cp"># e-Mail:            LanderlYoung@gmail.com</span>
</span><span class='line'><span class="cp"># Created Time:      Thu 31 Oct 2013 01:41:46 PM HST</span>
</span><span class='line'><span class="cp">###################################################################</span>
</span><span class='line'><span class="cp">#!/bin/bash</span>
</span><span class='line'><span class="n">synclient</span> <span class="n">VertScrollDelta</span><span class="o">=-</span><span class="mi">103</span>
</span><span class='line'><span class="n">synclient</span> <span class="n">HorizScrollDelta</span><span class="o">=-</span><span class="mi">103</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后别忘了加可执行权限</p>

<pre>
sudo chmod a+x /etc/profile.d/synaptics_natural_scrolling.sh
</pre>


<p>大功告成。</p>

<h3>2. 其他方法（所有触摸板通用）</h3>

<p>xorg有个<code>xinput</code>命令。如果，我是说如果，你没有这个命令的话，我帮你查好了它所在的软件包名——<code>xinput</code>：</p>

<pre>
young@Y470:~/Documents/octopress$dpkg -S /usr/bin/xinput 
xinput: /usr/bin/xinput
</pre>


<p>输入之后（不加任何参数），有如下输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">young</span><span class="err">@</span><span class="nl">Y470:</span><span class="o">~/</span><span class="n">Documents</span><span class="o">/</span><span class="n">octopress</span><span class="err">$</span><span class="n">xinput</span>
</span><span class='line'><span class="err">⎡</span> <span class="n">Virtual</span> <span class="n">core</span> <span class="n">pointer</span>                        <span class="n">id</span><span class="o">=</span><span class="mi">2</span>  <span class="p">[</span><span class="n">master</span> <span class="n">pointer</span>  <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'><span class="err">⎜</span>   <span class="err">↳</span> <span class="n">Virtual</span> <span class="n">core</span> <span class="n">XTEST</span> <span class="n">pointer</span>                <span class="n">id</span><span class="o">=</span><span class="mi">4</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">pointer</span>  <span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="err">⎜</span>   <span class="err">↳</span> <span class="n">SynPS</span><span class="o">/</span><span class="mi">2</span> <span class="n">Synaptics</span> <span class="n">TouchPad</span>                <span class="n">id</span><span class="o">=</span><span class="mi">14</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">pointer</span>  <span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="err">⎣</span> <span class="n">Virtual</span> <span class="n">core</span> <span class="n">keyboard</span>                       <span class="n">id</span><span class="o">=</span><span class="mi">3</span>  <span class="p">[</span><span class="n">master</span> <span class="n">keyboard</span> <span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Virtual</span> <span class="n">core</span> <span class="n">XTEST</span> <span class="n">keyboard</span>              <span class="n">id</span><span class="o">=</span><span class="mi">5</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Power</span> <span class="n">Button</span>                               <span class="n">id</span><span class="o">=</span><span class="mi">6</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Video</span> <span class="n">Bus</span>                                  <span class="n">id</span><span class="o">=</span><span class="mi">7</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Power</span> <span class="n">Button</span>                               <span class="n">id</span><span class="o">=</span><span class="mi">8</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Sleep</span> <span class="n">Button</span>                               <span class="n">id</span><span class="o">=</span><span class="mi">9</span>  <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Video</span> <span class="n">Bus</span>                                  <span class="n">id</span><span class="o">=</span><span class="mi">10</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Lenovo</span> <span class="n">EasyCamera</span>                          <span class="n">id</span><span class="o">=</span><span class="mi">12</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">AT</span> <span class="n">Translated</span> <span class="n">Set</span> <span class="mi">2</span> <span class="n">keyboard</span>             <span class="n">id</span><span class="o">=</span><span class="mi">13</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">Ideapad</span> <span class="n">extra</span> <span class="n">buttons</span>                       <span class="n">id</span><span class="o">=</span><span class="mi">15</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="err">↳</span> <span class="n">ACPI</span> <span class="n">Virtual</span> <span class="n">Keyboard</span> <span class="n">Device</span>             <span class="n">id</span><span class="o">=</span><span class="mi">16</span> <span class="p">[</span><span class="n">slave</span>  <span class="n">keyboard</span> <span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面就是各个输入设备了，看名字就猜得出来。可以使用<code>xinput --get-button-map &lt;设备名&gt;</code>显示按键映射，显示如下：</p>

<pre>
young@Y470:~/Documents/octopress$xinput --get-button-map "SynPS/2 Synaptics TouchPad" 
1 2 3 4 5 6 7 8 9 10 11 12 
</pre>


<p>于是下面要做的事就很明显了——改按键映射！既然有个<code>--get-button-map</code>参数肯定也有<code>--set-button-map</code>，没错，看了man手册发现真的有。经过测试各个按键的功能发现如下：
4、5、6、7四个值是控制触摸板滚动方向的，修改如下：</p>

<pre>
young@Y470:~/Documents/octopress$xinput --set-button-map "SynPS/2 Synaptics TouchPad" 1 2 3 5 4 7 6 8 9 10 11 12
</pre>


<p>为了使命令开机自动执行，可以使用方法一中介绍的两个方法。</p>

<p>当然方法二放在后面说是因为他有缺点——在一些少数程序比如文件管理器<code>nautilus</code>里面自然滚动失效的T^T。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用git下载单个分支]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/06/yong-gitxia-zai-dan-ge-fen-zhi/"/>
    <updated>2014-01-06T16:45:34+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/06/yong-gitxia-zai-dan-ge-fen-zhi</id>
    <content type="html"><![CDATA[<p>最近在玩octpress。开始一直在我的Debian系统里面玩的，后来因为一夹些软件必须在windows下面跑，只能在虚拟机里写博客了。然后就打算把github上的网页项目下载下来。但是这个项目有点不一样。github.io的博客项目有两个分支，master和source;其实他们根本不是分支的概念，没有什么交集的。在octpress项目文件夹里面是source分支里的内容，除了_deploy目录内的东西是用gitignore忽略的，_deploy里面的内容就是master分支的东西了。</p>

<p>所以我的需求是把两个分支单独下载下来，开始的方案失败（其实是不完美），后来搜了好多东西在stackoverflow上面找到了解决方案。</p>

<!--more-->


<hr />

<p> 1.新建一个文件夹，假设名字是blog</p>

<p> 2.cd进去输入</p>

<pre>
    git init
</pre>


<p> 3.配置git，比如</p>

<pre>
    git remote add origin git@xxx
</pre>


<p> 4.然后是</p>

<pre>
    git fetch origin
</pre>


<p>   把仓库的状态取回来</p>

<p> 5.因为_deploy目录里面也是这个项目，所以索性把.git目录复制进去</p>

<pre>
    cp -r .git _deploy/
</pre>


<p> 6.然后是下载分支，可以使用</p>

<pre>
    git branch -b branch_name origin/source
</pre>


<p>   从source分支新建一个分支。或者简单点，用：</p>

<pre>
    git branch -t origin/source
</pre>


<p>   直接吧source分支搞下来，其作用等同于</p>

<pre>
    git branch -b source origin/source
</pre>


<p> 7.cd 到_deploy目录，干同样的事</p>

<pre>
    git branch -t origin/source
</pre>


<p>这样两个分支就放到了不同的目录里面，接着按照octpress官方教程安装jekyll和rake等就可以开始博客了！</p>

<p>对了，顺便提一句。Debian里不允许使用gem安装ruby软件，只能使用apt安装bundler之类的东西。不过我在fedoral和基于Ubuntu的Deepin Linux上都没发现这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-项目启航]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang/"/>
    <updated>2014-01-05T22:32:13+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>一直以来都很想学习一下web技术，HTML5, CSS3, Javascript，前段时间算是终于闲下来了（其实是好多课没有意思，不想去上了），于是学习了一下，同时还写了一个Chrome 应用  <a href="https://github.com/LanderlYoung/Magnet2Torrent">Magent2Torrent</a>。了解javascript之后发现她真是一个灵活可爱的语言，也可能是我接触的第一个动态语言（或者叫弱类型语言），总觉得她有着无限的魅力。同时还喜欢上了JSON！</p>

<p>前一段时间（在这个github博客搭建之前）玩了一下<a href="http://www.nodejs.org">Node.js</a>，发现这真是个好东西，我可以在本地执行javascript脚本了, 尽管Node.js的设计初衷并非如此……（我这是玩得有点偏了）虽然和python等本地执行的脚本语言在API上还有差距，鉴于Node.js可以使用C++模块（add on），也算是功能完备了。</p>

<!--more-->


<p>之前用过一个python写的脚本，可以请求有道网页版的词典，然后解析得到的html内容，行命令行输出单词解释，于是我冒出了用javascript+Node.js实现上述功能的想法。
与之前的python脚本不同的是，我打算使用有到的API来查询单词。</p>

<p>鉴于有到词典的查询API需要申请，且免费用户查询次数有限，我决定使用wireshark抓包来得到官方
API。抓包的应用是win8上的有道词典。得到的数据如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">GET</span> <span class="o">/</span><span class="n">search</span><span class="o">?</span><span class="n">keyfrom</span><span class="o">=</span><span class="n">metrodict</span><span class="p">.</span><span class="n">main</span><span class="o">&amp;</span><span class="n">xmlDetail</span><span class="o">=</span><span class="kc">true</span><span class="o">&amp;</span><span class="n">doctype</span><span class="o">=</span><span class="n">xml</span><span class="o">&amp;</span><span class="n">xmlVersion</span><span class="o">=</span><span class="mf">8.1</span><span class="o">&amp;</span><span class="n">dogVersion</span><span class="o">=</span><span class="mf">1.0</span><span class="o">&amp;</span><span class="n">q</span><span class="o">=</span><span class="n">node</span><span class="o">&amp;</span><span class="n">le</span><span class="o">=</span><span class="n">eng</span><span class="o">&amp;</span><span class="n">keyfrom</span><span class="o">=</span><span class="n">metrodict</span><span class="p">.</span><span class="n">input</span><span class="o">&amp;</span><span class="n">client</span><span class="o">=</span><span class="n">metrodict</span><span class="o">&amp;</span><span class="n">id</span><span class="o">=</span><span class="mi">3019615280104595010663601040404140109040186114402823410158212201782429070109</span><span class="o">&amp;</span><span class="n">appVer</span><span class="o">=</span><span class="mf">1.1.49.6663</span><span class="p">.</span><span class="n">beta</span><span class="o">&amp;</span><span class="n">vendor</span><span class="o">=</span><span class="n">store</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'>
</span><span class='line'><span class="nl">Host:</span> <span class="n">dict</span><span class="p">.</span><span class="n">youdao</span><span class="p">.</span><span class="n">com</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以从中看到各个参数，其中参数q就是我们要查询的单词，此处是node。其他参数事实上并不需要考虑太多，不过秉承着geek精神还是看一下为好。</p>

<hr />

<ul>
<li>keyfrom明显意思是数据来源，此处是metrodict.main和win8客户段吻合。</li>
<li>xmlDetail看来是个bool类型，此处为true，可以猜测如果为false可能返回解释会比较简单。</li>
<li>doctype肯定是文档类型，此处是xml。</li>
<li>xmlVersion，xml文档的版本。</li>
<li>dog.Version, 又是某个东西的版本。</li>
<li><strong>q</strong>就是要查询的单词了。</li>
<li>le看来是语言的意思，le = language，值是eng表示英语english。</li>
<li>kerfrom和前文一样。client是客户端，这里是metrodict就是win8的词典啦。</li>
<li>id，卧槽！这么长，估计申请到的id就是这样，这个id肯定是有道官方使用的id（绝对没有查询次数限制，哦吼吼！）</li>
<li>appVersion指定客户端应用版本。</li>
<li>vender不清楚什么意思，不管他啦。</li>
</ul>


<hr />

<p>总结下来两个有用的参数xmlDetail和q。打开chrome验证一下看看是不是。</p>

<p> 1.xmlDetail=true版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p> 2.xmlDetail=false版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=false&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p>额。。。有种坑爹的感觉，这TM不是一样的吗！！！ 嘛，嘛。淡定，就当他是一样的好啦。这么说来只有 <strong>q</strong> 参数有实际用处了。</p>

<p>接下来再瞅瞅发音是怎么回事，老方法。wireshark抓包得到的结果是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">GET</span> <span class="o">/</span><span class="n">dictvoice</span><span class="o">?</span><span class="n">audio</span><span class="o">=</span><span class="n">world</span><span class="o">&amp;</span><span class="n">type</span><span class="o">=</span><span class="mi">2</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nl">Accept:</span> <span class="err">*/</span><span class="o">*</span>
</span><span class='line'><span class="n">If</span><span class="o">-</span><span class="n">Modified</span><span class="o">-</span><span class="nl">Since:</span> <span class="n">Sun</span><span class="p">,</span>  <span class="mo">05</span> <span class="n">Jan</span> <span class="mi">2014</span> <span class="mi">14</span><span class="o">:</span><span class="mo">04</span><span class="o">:</span><span class="mi">56</span> <span class="n">GMT</span>
</span><span class='line'><span class="n">User</span><span class="o">-</span><span class="nl">Agent:</span> <span class="n">Mozilla</span><span class="o">/</span><span class="mf">5.0</span> <span class="p">(</span><span class="n">compatible</span><span class="p">;</span> <span class="n">MSIE</span> <span class="mf">10.0</span><span class="p">;</span> <span class="n">Windows</span> <span class="n">NT</span> <span class="mf">6.2</span><span class="p">;</span> <span class="n">Trident</span><span class="o">/</span><span class="mf">6.0</span><span class="p">;</span> <span class="n">MSAppHost</span><span class="o">/</span><span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'><span class="n">GetContentFeatures</span><span class="p">.</span><span class="n">DLNA</span><span class="p">.</span><span class="nl">ORG:</span> <span class="mi">1</span>
</span><span class='line'><span class="nl">Pragma:</span> <span class="n">getIfoFileURI</span><span class="p">.</span><span class="n">dlna</span><span class="p">.</span><span class="n">org</span>
</span><span class='line'><span class="n">Accept</span><span class="o">-</span><span class="nl">Language:</span> <span class="n">zh</span><span class="o">-</span><span class="n">Hans</span><span class="o">-</span><span class="n">CN</span><span class="p">,</span> <span class="n">zh</span><span class="o">-</span><span class="n">Hans</span><span class="p">;</span><span class="n">q</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">en</span><span class="o">-</span><span class="n">US</span><span class="p">;</span><span class="n">q</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">en</span><span class="p">;</span><span class="n">q</span><span class="o">=</span><span class="mf">0.3</span>
</span><span class='line'><span class="n">UA</span><span class="o">-</span><span class="nl">CPU:</span> <span class="n">AMD64</span>
</span><span class='line'><span class="n">Accept</span><span class="o">-</span><span class="nl">Encoding:</span> <span class="n">gzip</span><span class="p">,</span>  <span class="n">deflate</span>
</span><span class='line'><span class="nl">Host:</span> <span class="n">dict</span><span class="p">.</span><span class="n">youdao</span><span class="p">.</span><span class="n">com</span>
</span><span class='line'><span class="nl">Connection:</span> <span class="n">Keep</span><span class="o">-</span><span class="n">Alive</span>
</span></code></pre></td></tr></table></div></figure>


<p>蛮长的嘛。话说这个更简单了。只有两个参数audio和type。老衲闭着眼睛都能算出来audio参数是干嘛的：&#8221;那就是！要发音的单词！&#8221;。&#8221;喂！我说，你太聪明了吧&#8221;。唉，一不小心人格分裂症又犯了, 最近期末考试，药停了两天没办法。另一个type参数经过实验发现是英音和美音。当type == 1时是英音，等于2时是美音，其他情况我没试，猜测是默认发音（英音或美音）。
然后再测试一下:</p>

<p>tomato的英发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=1">戳这里</a>。</p>

<p>tomato的美发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=2">戳这里</a>。</p>

<p>恩，不错。这次就对了嘛。</p>

<p>好吧，今天晚上刚考完智能卡的说。。。。这个项目这几天内估计不会有进展的，期待期末快结束吧。不知道下一篇什么时候写了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探 MFC]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc/"/>
    <updated>2013-12-28T22:13:34+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc</id>
    <content type="html"><![CDATA[<p>这几天要写智能卡大作业，老师要求必须有图形界面。
作业本身没什么难的，调用提供的API函数完成相应功能。倒是图形界面让我觉得比较有趣，以前一直用java写图形界面。但是java程序运行起来比较麻烦，首先得有jre，其次jar也不一定能双击运行，当时就萌生了写个MFC程序的念头，囿于时间有限一直没学习。这次倒是给了我一个大好机会。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CardManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">DATA_T</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">PUBLISHER</span><span class="p">,</span>
</span><span class='line'>      <span class="n">CARD_ID</span><span class="p">,</span>
</span><span class='line'>      <span class="n">USER_NAME</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">PUBLISHER_ADDR</span> <span class="o">=</span> <span class="mh">0x30</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">PUBLISHER_LEN</span> <span class="o">=</span> <span class="mh">0x10</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">CARD_ID_ADDR</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">PUBLISHER_ADDR</span> <span class="o">+</span> <span class="n">PUBLISHER_LEN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">CARD_ID_LEN</span> <span class="o">=</span> <span class="mh">0x10</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">USER_NAME_ADDR</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">CARD_ID_ADDR</span> <span class="o">+</span> <span class="n">CARD_ID_LEN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">USER_NAME_LEN</span> <span class="o">=</span> <span class="mh">0x10</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">BALANCE_ADDR</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">USER_NAME_ADDR</span> <span class="o">+</span> <span class="n">USER_NAME_LEN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">BALANCE_LEN</span> <span class="o">=</span> <span class="mh">0x04</span><span class="p">;</span> <span class="c1">//sizeof(float)</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">BALANCE_BUF_ADDR</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">BALANCE_ADDR</span> <span class="o">+</span> <span class="n">BALANCE_LEN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">short</span> <span class="n">BALANCE_BUF_LEN</span> <span class="o">=</span> <span class="n">BALANCE_LEN</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HANDLE</span> <span class="n">m_icdev</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">m_passwdChecked</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">noPasswdFunc</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">notInitFunc</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">passWordConfirm</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">noPasswdFunc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">m_passwdChecked</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">noPasswdFunc</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">m_passwdChecked</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">initConfirm</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">notInitFunc</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">m_icdev</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">notInitFunc</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">m_icdev</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">writeBalance</span><span class="p">(</span><span class="kt">float</span> <span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">writeInfo</span><span class="p">(</span><span class="n">DATA_T</span> <span class="n">info_type</span><span class="p">,</span>
</span><span class='line'>                 <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">getBuffer</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">writeBuffer</span><span class="p">(</span><span class="kt">float</span> <span class="n">balance</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">float2bytes</span><span class="p">(</span><span class="kt">float</span> <span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">float</span> <span class="n">bytes2float</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">bytes</span><span class="p">);</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CardManager</span><span class="p">();</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="o">~</span><span class="n">CardManager</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">isInited</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">m_icdev</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">setNoPasswdCallBack</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">callBack</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">noPasswdFunc</span> <span class="o">=</span> <span class="n">callBack</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">void</span> <span class="n">setNotInitCallBack</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">callback</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">notInitFunc</span> <span class="o">=</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> return 0 for ok</span>
</span><span class='line'><span class="cm"> 1 for init device error</span>
</span><span class='line'><span class="cm"> 2 for no card</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">port</span><span class="p">,</span>  <span class="kt">long</span> <span class="n">baud</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">disConnect</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getInfo</span><span class="p">(</span><span class="n">DATA_T</span> <span class="n">data_type</span><span class="p">,</span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">checkPassWd</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> return 0 for ok</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">release</span><span class="p">(</span><span class="kt">float</span> <span class="n">initialBalance</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> return 0 for ok</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">consume</span><span class="p">(</span><span class="kt">float</span> <span class="n">costs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">getBalance</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">charge</span><span class="p">(</span><span class="kt">float</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shana]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/27/shana/"/>
    <updated>2013-12-27T20:22:33+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/27/shana</id>
    <content type="html"><![CDATA[<p><video controls>
<source src="http://LanderlYoung.github.io/assets/media/shana_Final_FinalED.mp4" type="video/mp4"/>
</video></p>
]]></content>
  </entry>
  
</feed>
