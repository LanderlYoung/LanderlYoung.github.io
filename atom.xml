<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-01-05T23:32:46+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-项目启航]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang/"/>
    <updated>2014-01-05T22:32:13+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang</id>
    <content type="html"><![CDATA[<h1>基于Node.js的命令行词典应用</h1>

<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js">项目地址</a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>一直以来都很想学习一下web技术，HTML5, CSS3, Javascript，前段时间算是终于闲下来了（其实是好多课没有意思，不想去上了），于是学习了一下，同时还写了一个Chrome 应用  <a href="https://github.com/LanderlYoung/Magnet2Torrent">Magent2Torrent</a>。了解javascript之后发现她真是一个灵活可爱的语言，也可能是我接触的第一个动态语言（或者叫弱类型语言），总觉得她有着无限的魅力。同时还喜欢上了JSON！</p>

<p>前一段时间（在这个github博客搭建之前）玩了一下<a href="http://www.nodejs.org">Node.js</a>，发现这真是个好东西，我可以在本地执行javascript脚本了, 尽管Node.js的设计初衷北非如此……（我这是玩得有点偏了）虽然和python等本地执行的脚本语言在API上还有差距，鉴于Node.js可以使用C++模块（add on），也算是功能完备了。</p>

<p>之前用过一个python写的脚本，可以请求有道网页版的词典，然后解析得到的html内容，行命令行输出单词解释，于是我冒出了用javascript+Node.js实现上述功能的想法。
与之前的python脚本不同的是，我打算使用有到的API来查询单词。鉴于有到词典的查询</p>

<p>API需要申请，且免费用户查询次数有限，我决定使用wireshark抓包来得到官方
API。抓包的应用是win8上的有道词典。得到的数据如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /search?keyfrom=metrodict.main&xmlDetail=true&doctype=xml&xmlVersion=8.1&dogVersion=1.0&q=node&le=eng&keyfrom=metrodict.input&client=metrodict&id=3019615280104595010663601040404140109040186114402823410158212201782429070109&appVer=1.1.49.6663.beta&vendor=store HTTP/1.1
</span><span class='line'>
</span><span class='line'>Host: dict.youdao.com
</span><span class='line'>
</span><span class='line'>... ...</span></code></pre></td></tr></table></div></figure>


<p>可以从中看到各个参数，其中参数q就是我们要查询的单词，此处是node。其他参数事实上并不需要考虑太多，不过秉承着geek精神还是看一下为好。</p>

<hr />

<ul>
<li>keyfrom明显意思是数据来源，此处是metrodict.main和win8客户段吻合。</li>
<li>xmlDetail看来是个bool类型，此处为true，可以猜测如果为false可能返回解释会比较简单。</li>
<li>doctype肯定是文档类型，此处是xml。</li>
<li>xmlVersion，xml文档的版本。</li>
<li>dog.Version, 又是某个东西的版本。</li>
<li><h3>q就是要查询的单词了。</h3></li>
<li>le看来是语言的意思，le = language，值是eng表示英语english。</li>
<li>kerfrom和前文一样。client是客户端，这里是metrodict就是win8的词典啦。</li>
<li>id，卧槽！这么长，估计申请到的id就是这样，这个id肯定是有道官方使用的id（绝对没有查询次数限制，哦吼吼！）</li>
<li>appVersion指定客户端应用版本。</li>
<li>vender不清楚什么意思，不管他啦。</li>
</ul>


<hr />

<p>总结下来两个有用的参数xmlDetail和q。打开chrome验证一下看看是不是。</p>

<p> 1.xmlDetail=true版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p> 2.xmlDetail=false版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=false&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p>额。。。有种坑爹的感觉，这TM不是一样的吗！！！ 嘛，嘛。淡定，就当他是一样的好啦。这么说来只有 <strong>q</strong> 参数有实际用处了。</p>

<p>接下来再瞅瞅发音是怎么回事，老方法。wireshark抓包得到的结果是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /dictvoice?audio=world&type=2 HTTP/1.1
</span><span class='line'>Accept: */*
</span><span class='line'>If-Modified-Since: Sun,  05 Jan 2014 14:04:56 GMT
</span><span class='line'>User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MSAppHost/1.0)
</span><span class='line'>GetContentFeatures.DLNA.ORG: 1
</span><span class='line'>Pragma: getIfoFileURI.dlna.org
</span><span class='line'>Accept-Language: zh-Hans-CN, zh-Hans;q=0.8, en-US;q=0.5, en;q=0.3
</span><span class='line'>UA-CPU: AMD64
</span><span class='line'>Accept-Encoding: gzip,  deflate
</span><span class='line'>Host: dict.youdao.com
</span><span class='line'>Connection: Keep-Alive</span></code></pre></td></tr></table></div></figure>


<p>蛮长的嘛。话说这个更简单了。只有两个参数audio和type。老衲闭着眼睛都能算出来audio参数是干嘛的：&#8221;那就是！要发音的单词！&#8221;。&#8221;喂！我说，你太聪明了吧&#8221;。唉，一不小心人格分裂症又犯了, 最近期末考试，药停了两天没办法。另一个type参数经过实验发现是英音和美音。当type == 1时是英音，等于2时是美音，其他情况我没试，猜测是默认发音（英音或美音）。
然后再测试一下:</p>

<p>tomato的英发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=1">戳这里</a>。</p>

<p>tomato的美发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=2">戳这里</a>。</p>

<p>恩，不错。这次就对了嘛。</p>

<p>好吧，今天晚上刚考完智能卡的说。。。。这个项目这几天内估计不会有进展的，期待期末快结束吧。不知道下一篇什么时候写了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探 MFC]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc/"/>
    <updated>2013-12-28T22:13:34+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/28/chu-tan-mfc</id>
    <content type="html"><![CDATA[<p>这几天要写智能卡大作业，老师要求必须有图形界面。
作业本身没什么难的，调用提供的API函数完成相应功能。倒是图形界面让我觉得比较有趣，以前一直用java写图形界面。但是java程序运行起来比较麻烦，首先得有jre，其次jar也不一定能双击运行，当时就萌生了写个MFC程序的念头，囿于时间有限一直没学习。这次倒是给了我一个大好机会。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#pragma once
</span><span class='line'>
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;Windows.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class CardManager {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>
</span><span class='line'>  enum DATA_T {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      PUBLISHER, 
</span><span class='line'>
</span><span class='line'>      CARD_ID, 
</span><span class='line'>
</span><span class='line'>      USER_NAME, 
</span><span class='line'>
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>
</span><span class='line'>  const short PUBLISHER_ADDR = 0x30;
</span><span class='line'>
</span><span class='line'>  const short PUBLISHER_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short CARD_ID_ADDR =
</span><span class='line'>
</span><span class='line'>      PUBLISHER_ADDR + PUBLISHER_LEN;
</span><span class='line'>
</span><span class='line'>  const short CARD_ID_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short USER_NAME_ADDR =
</span><span class='line'>
</span><span class='line'>      CARD_ID_ADDR + CARD_ID_LEN;
</span><span class='line'>
</span><span class='line'>  const short USER_NAME_LEN = 0x10;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_ADDR =
</span><span class='line'>
</span><span class='line'>      USER_NAME_ADDR + USER_NAME_LEN;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_LEN = 0x04; //sizeof(float)
</span><span class='line'>
</span><span class='line'>  const short BALANCE_BUF_ADDR =
</span><span class='line'>
</span><span class='line'>      BALANCE_ADDR + BALANCE_LEN;
</span><span class='line'>
</span><span class='line'>  const short BALANCE_BUF_LEN = BALANCE_LEN;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  HANDLE m_icdev;
</span><span class='line'>
</span><span class='line'>  bool m_passwdChecked;
</span><span class='line'>
</span><span class='line'>  void(*noPasswdFunc)(void);
</span><span class='line'>
</span><span class='line'>  void(*notInitFunc)(void);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline bool passWordConfirm()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      if (noPasswdFunc && !m_passwdChecked) {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          noPasswdFunc();
</span><span class='line'>
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return m_passwdChecked;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  inline bool initConfirm()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      if (notInitFunc && !m_icdev) {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          notInitFunc();
</span><span class='line'>
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return m_icdev != 0;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  bool writeBalance(float num);
</span><span class='line'>
</span><span class='line'>  bool writeInfo(DATA_T info_type, 
</span><span class='line'>
</span><span class='line'>                 const std::string& data);
</span><span class='line'>
</span><span class='line'>  float getBuffer();
</span><span class='line'>
</span><span class='line'>  bool writeBuffer(float balance);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  static unsigned char *float2bytes(float num);
</span><span class='line'>
</span><span class='line'>  static float bytes2float(unsigned char* bytes);
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>
</span><span class='line'>  CardManager();
</span><span class='line'>
</span><span class='line'>  virtual ~CardManager();
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline bool isInited()
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      return m_icdev != 0;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  inline void setNoPasswdCallBack(void(*callBack)(void))
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      noPasswdFunc = callBack;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  inline void setNotInitCallBack(void(*callback)(void))
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      notInitFunc = callback;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  1 for init device error
</span><span class='line'>
</span><span class='line'>  2 for no card
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int init(int port,  long baud);
</span><span class='line'>
</span><span class='line'>  bool disConnect();
</span><span class='line'>
</span><span class='line'>  int getInfo(DATA_T data_type,  std::string& out);
</span><span class='line'>
</span><span class='line'>  bool checkPassWd(const unsigned char* key);
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int release(float initialBalance);
</span><span class='line'>
</span><span class='line'>  /*
</span><span class='line'>
</span><span class='line'>  return 0 for ok
</span><span class='line'>
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>  int consume(float costs);
</span><span class='line'>
</span><span class='line'>  float getBalance();
</span><span class='line'>
</span><span class='line'>  int charge(float amount);
</span><span class='line'>
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shana]]></title>
    <link href="http://LanderlYoung.github.io/blog/2013/12/27/shana/"/>
    <updated>2013-12-27T20:22:33+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2013/12/27/shana</id>
    <content type="html"><![CDATA[<p><video controls>
<source src="http://LanderlYoung.github.io/assets/media/shana_Final_FinalED.mp4" type="video/mp4"/>
This is no suitable format of video for your browser!
</video></p>
]]></content>
  </entry>
  
</feed>
