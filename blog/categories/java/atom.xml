<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2016-01-11T00:43:50+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java序列化实践]]></title>
    <link href="http://LanderlYoung.github.io/blog/2015/04/04/javaxu-lie-hua-shi-jian/"/>
    <updated>2015-04-04T18:06:20+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2015/04/04/javaxu-lie-hua-shi-jian</id>
    <content type="html"><![CDATA[<p>java中实例的序列化是指将一个实例转成 二进制流以用于网络传输或者固化存储之用。事实上，简单点说就是把一个类实例的成员变量存储下来，然而这个过程根据成员变量的类型的不同，可能会很简单，也可能会很复杂。序列化的用处还是很大的，比如跨进程通信（IPC，安卓中的IPC用到了序列化，只是安卓自身实现了一个比java更轻量级、更简单的序列化方式。但是原理大同小异），远程方法调用（RMI，事实上这个和安卓中的Binder通讯很类似）;此外还常见的是把实例序列化到数据库中以blob的形式存储。并且因为java语言本身就是跨平台设计的，序列化之后的数据也是平台无关的，因此你无需关心大小端之类的问题（以及类似于C语言的内存对齐问题）！既然序列化这么有用还是有必要学习一下的。（BTW，java EE中提供了更加严格的固化方案Java Date Object，或着也可以考虑使用Hibernate框架。）</p>

<p>参考的资料是《Thinking in java》，和<a href="http://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html">IBM的一篇博文</a>。下面来做几个实验，一边学习一边实践一下。</p>

<!--more-->


<p>序列化其实是很简单的，你只需要给想序列化的类实现Serializable接口（这个接口只是标签接口，没有方法）。你的类就被标记为了可序列化。然后序列化的过程是使用ObjectOutputSteram::writeObject()方法;反序列化是使用ObjectInputStream::readObject()方法。</p>

<h3>1. <code>Serializable</code>方式</h3>

<p>这种方式可以说是由jvm来全权掌控的。序列化的时候，java会把类的每一个实例成员变量（不包括static成员变量）写下来，比较好理解的是原始类型。如果类中有成员是其他Object，就会递归的去序列化这个Object。</p>

<p>比如如下代码：</p>

<pre><code class="java">package com.young;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

class A implements Serializable {
    private static int instances = 0;

    public A next;
    private int num;

    public A(int num, A next) {
        this.num = num;
        System.out.println("Constructor #" + (instances++));
        this.next = next;
    }

    @Override
    public String toString() {
        return Integer.toString(num) + " " + next;
    }
}

public class Main {

    public static void main(String[] args) throws IOException, ClassNotFoundException {
        A a = new A(7, new A(8, null));

        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));
        oo.writeObject(a);
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));
        A a1 = (A) oi.readObject();
        oi.close();
        System.out.println("a:" + a);
        System.out.println("a1:" + a1);
    }
}
</code></pre>

<p>输出如下：</p>

<pre><code class="bash">Constructor #0
Constructor #1
serialize
deserialize
a:7 8 null
a1:7 8 null
</code></pre>

<p>然而在反序列化的过程中，<strong>构造函数并没有被调用</strong>！所以Serializable方式的反序列化是直接从数据中“填充”一个实例出来！看上去有点神奇的样子。</p>

<h4>1.1 <code>transient</code>关键字</h4>

<p>在Serializable方式中如果有些成员变量（比如密码等敏感信息）不想被序列化的话，你可以使用transient关键字来修饰之。</p>

<h4>1.2 static fields</h4>

<p>序列化时static变量不会被序列化进去。因为它是class的信息，和实例没什么关系。如果要序列化的话可以自己用方式2或3手动write。</p>

<h3>2. <code>Enternalizable</code>方式</h3>

<p>了解Serializable方式的序列化会发现：在整个序列化过程中我们好像什么都没做，只是实现了Serializable接口而已，对于这种打酱油的行为我表示不安心！感觉局面不在自己的掌控之中呀！好在java中还有另一种序列化方式<code>Externalizable</code>方式。这个接口中有两个方法：<code>void writeExternal(ObjectOutput out)</code>和<code>void readExternal(ObjectInput in)</code>。（这种方式和Android中的Parcelable序列化方式思路是完全一样的。）直接看例子：</p>

<pre><code class="java">package com.young;

import java.io.Externalizable;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;

class B implements Externalizable {
    private static int instances = 0;

    private int n;

    public B() {
        System.out.println("Constructor1 #" + (instances++));
    }

    public B(int n) {
        System.out.println("Constructor2 #" + (instances++));
        this.n = n;
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(n ^ 100); //加密存储
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        n = in.readInt() ^ 100; //读取解密
    }

    @Override
    public String toString() {
        return "b:" + n;
    }
}

public class Main {


    public static void main(String[] args) throws IOException, ClassNotFoundException {
        B b1 = new B(7);
        B b2 = new B(9);
        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));
        oo.writeObject(b1);
        oo.writeObject(b2);
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));

        B b = (B) oi.readObject();
        System.out.println(b);
        b = (B) oi.readObject();
        System.out.println(b);
        oi.close();
    }
}
</code></pre>

<p>输出如下：</p>

<pre><code class="bash">Constructor2 #0
Constructor2 #1
serialize
deserialize
Constructor1 #2
b:7
Constructor1 #3
b:9
</code></pre>

<p>从中可以看出：我们需要在writeExternal中对该类需要序列化的数据进行操作，在readExternal中相应的进行读取，需要注意的是：读和写的顺序要一致。在这种方式下java自身是不会干涉实例的序列化的，所有的序列化、反序列化工作都是由开发者自己定义的。这种方式下开发人员有了足够的自由度！比如我可以writeExternal中对数据加密，在readExternal中对数据解密，以此保证序列化的数据是安全的。（上面的代码中使用亦或进行的简单的加解密操作）。</p>

<p>和Serializable不同的是我们看到在反序列化的时候<strong>默认构造函数被调用了</strong>！所以这种方式是比较纯粹的实现接口+接口回调，而不是Serializable中实例直接被java填充出来的黑魔法那样！</p>

<p>因为要调用默认构造函数，因此实现Externalizable接口的类必须有一个public的默认构造函数！这样jvm才能初始化一个类，然后调用其接口实现来进行反序列化。</p>

<h3>3. 第三种序列化方式</h3>

<p>这种序列化方式更像是前两种的综合体，TIJ中称这种方法为“An alternative to Externalizable”。（并且这种方式并不是很符合通常的java语言习惯，因此看起来很奇怪。在Thinking in java一书中被作者Bruce Eckel喷得不轻！不过我们还是看一下什么情况。）</p>

<p>实现方式是实现Serializable接口，然后在你的类中加入如下两个方法，而且方法签名要一模一样！：</p>

<pre><code class="java">private void writeObject(ObjectOutputStream stream)
throws IOException;

private void readObject(ObjectInputStream stream)
throws IOException, ClassNotFoundException;
</code></pre>

<p>没错，你没有看错他们的确是private方法！看仔细咯，这个方法和Externalizable中的两个方法的参数是不一样的，这里面是ObjectOutputStream，而后者是ObjectOutput。</p>

<p>然后在两个方法中你可以手动控制序列化，这一点和方式2相同。不同的是他还和方式1结合了！不过到底怎么结合的呢？关键在于<code>ObjectOutputStream：：defaultWriteObject()</code>方法和<code>ObjectOutputStream：：defaultReadObject()</code>。你可以在writeObject最开始调用相应的defaultWriteObject方法。他的作用就是使用默认的序列化实现方式来操作当前实例，在这之后你可以自由进行其他的操作序列化过程。对于read亦是如此。</p>

<p>是不是显得很奇怪，我调用了ObjectInputStream的方法，而且都没有把this传进去，可是jvm却把“我”给序列化了！对于这真的只能说不要在意细节，java语言就是这么设计的，不喜欢可以不用这种方式嘛～（反正我最喜欢方式2</p>

<p><blockquote><p>If you are going to use the default mechanism to write the non-transient parts of your object, you must call defaultWriteObject( ) as the first operation in writeObject( ), and defaultReadObject( ) as the first operation in readObject( ). These are strange method calls. It would appear, for example, that you are calling defaultWriteObject( ) for an ObjectOutputStream and passing it no arguments, and yet it somehow turns around and knows the reference to your object and how to write all the non-transient parts. Spooky.</p><footer><strong>&lsquo;Bruce Eckel&rsquo; &lsquo;Thinking in java&rsquo;</strong></footer></blockquote></p>

<p>好!现在&#8221;show me the code&#8221;:</p>

<pre><code class="java">class T implements Serializable {
    public static int instances = 0;
    private int num;
    private transient String passwd;

    public T(int n) {
        num = n;
        passwd = n + "0";
        System.out.println("Constructor #" + (instances++));
    }

    private void writeObject(ObjectOutputStream stream)
            throws IOException {
        stream.defaultWriteObject();
        stream.writeObject("NO PASSWORD");
        System.out.println("writeObject");

    }

    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        passwd = (String) stream.readObject();
        System.out.println("readObject");
    }

    @Override
    public String toString() {
        return num + " " + passwd;
    }
}

public class Main {

    public static void main(String[] args) throws IOException, ClassNotFoundException {

        T t = new T(10);
        T t1 = new T(11);
        //
        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));

        oo.writeObject(t);
        oo.writeObject(t1);

        //
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));
        T tmp;
        tmp = (T) oi.readObject();
        System.out.println(tmp);
        tmp = (T) oi.readObject();
        System.out.println(tmp);

        //
        oi.close();
    }
}
</code></pre>

<p>输出
<code>bash
Constructor #0
Constructor #1
serialize
writeObject
writeObject
deserialize
readObject
10 NO PASSWORD
readObject
11 NO PASSWORD
</code></p>

<p>可以看出这种<strong>方式3仍然不会调用构造函数</strong>！</p>

<h3>4. serialVersionUID 常量</h3>

<p>不管是上述的那一种序列化方式，都可以使用<code>serialVersionUID</code>控制class的版本问题。<code>serialVersionUID</code>是一个定义在类内部的成员常量比如：<code>private static final int serialVersionUID = 1L;</code>。他的作用是标记class的版本（这是我个人的理解，下面解释一下）。一个类如果定义了这个常量(就算你没有显式定义，javac也会帮你生成一个)，在序列化时会存储下来这个常量。当反序列化时jvm会先比较加载的class和序列化数据中的类的serialVersionUID是否相同，如果不同的话就认为class版本不一样，抛出<code>java.io.InvalidClassException</code>异常，拒绝反序列化。直白一点说就是“当一个类序列化时候的serialVersionUID和反序列化时候的serialVersionUID相同时，其反序列化才会成功。</p>

<p>当你的某个用于固化的class被更新的时候，他的成员和原来相比已经不再完全相同了，此时之前被序列化的数据——为了避免逻辑混乱——已经不能再反序列化到新的class中了。此时你可以更改新的class的serialVersionUID来达到这一目的。</p>

<hr />

<blockquote><p>  事实上因为Externalizable方式的序列化、反序列化全部是由程序员一手掌握的，因此它显得范围额比较简单，所有逻辑（哪些要序列化，如何序列化）都可以在接口的两个方法中控制。然而Serializable方式由于是由jvm全权负责的，要控制一些逻辑反而会显得不那么简单明了。</p></blockquote>

<h3>5. 一些特殊情况</h3>

<ol>
<li>相同的instance问题：比如一个List中包含了同一个实例的多处引用。那么序列化时<strong>同一个引用只会序列化一次</strong>。反序列化时这些相同的引用最终还是得到的引用仍然是相同的——同一个实例。所以循环引用也不会发生死循环的情况！（不得不说这一点很是机智！）</li>
<li>基于1,<strong>当序列化时写入同一个实例（引用相同）时，第二次写入并不会触发其序列化</strong>，因此只是第一次写入时进行了序列化，即使后来写入的时候实例的状态已经发生了改变（jvm也会忽略）。所以这一点会需要特别注意。</li>
<li><p>父类没有实现序列化接口而子类实现的时候（Drived extends Base)：</p>

<p> 这里序列化接口有两种（Serializable、Externalizable）分两种情况叙述：</p>

<ul>
<li>Serializable：此时Base因为没有实现Serializable而不能序列化，但是Drived因为实现了接口所以可以序列化。我们知道实现Serializable接口的类不需要调用构造函数就能反序列化。我们还知道类的初始化顺序是首先要初始化父类的。这里反序列化时就会出现要初始化父类的情况，因此需要父类有public默认构造函数。同时如果是方式3的话自然也可以手动序列化父类中的数据。</li>
<li>Externalizable：这个最好说：子类要有public默认构造函数;父类就无所谓了，反正子类的默认构造函数会调用父类的构造函数。至于哪些会序列化，哪些不会，就自己掌控了。</li>
</ul>
</li>
</ol>


<h3>总结</h3>

<ol>
<li><code>Serializable</code>方式(方式1、3)反序列化时不会调用构造函数。</li>
<li><code>Externalizable</code>方式反序列化会调用默认（无参）构造函数，如果没有public默认构造函数会抛异常。</li>
<li><code>static</code> 变量默认不会序列化。</li>
<li><code>transient</code> 关键字修饰的变量默认也不会序列化。</li>
<li><code>serialVersionUID</code>控制class版本信息，防止出现不正常序列化</li>
<li>相同引用的实例序列化时只会序列化一次。反序列化后引用也是相同的。</li>
<li>父类没有序列化而子类序列化的情况。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 中JNI的使用]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/10/16/java-zhong-jnide-shi-yong/"/>
    <updated>2014-10-16T21:10:55+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/10/16/java-zhong-jnide-shi-yong</id>
    <content type="html"><![CDATA[<p>JNI全称是<code>Java Native Interface</code>是在JAVA和Native层（包括但不限于C/C++）相互调用的接口规范。</p>

<p>JNI在JAVA1.1中正式推出，在JAVA1.2版本中加入了<code>JNI_OnLoad</code>，<code>JNI_OnUnload</code>方法，这两个方法还是很有用的，后面再说。</p>

<!--more-->


<h3>JNI基础篇</h3>

<p>Java通过JNI调用本地方法的过程大致是</p>

<ol>
<li>写一个Java类，在其中声明对应要调用的native方法，用<code>native</code>关键字修饰。 比如<code>private static native int native_newInstance();</code></li>
<li>通过<code>javah</code>命令生成java类对应的C/C++头文件。<code>javah -encoding utf-8 -cp src com.young.soundtouch.SoundTouch</code></li>
<li>在C/C++中实现头文件中声明的函数</li>
<li>编译C/C++代码为动态库（Windows中的dll，linux(Android)中的so，MAC OSX中的dylib）。</li>
<li>在java代码中加载动态库，即可像调用Java方法一样，调用到native函数。</li>
</ol>


<p>其中第三步在Java1.2中增加了<code>JNI_OnLoad</code>方法之后有另一种实现方式（<a href="#jni_onload">后面</a>说）。</p>

<p>javah生成的头文件大致是这样的：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">DO</span> <span class="n">NOT</span> <span class="n">EDIT</span> <span class="n">THIS</span> <span class="n">FILE</span> <span class="o">-</span> <span class="n">it</span> <span class="n">is</span> <span class="n">machine</span> <span class="n">generated</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">jni</span><span class="o">.</span><span class="na">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Header</span> <span class="k">for</span> <span class="kd">class</span> <span class="nc">com_young_soundtouch_SoundTouch</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">_Included_com_young_soundtouch_SoundTouch</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_Included_com_young_soundtouch_SoundTouch</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">extern</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">undef</span> <span class="n">com_young_soundtouch_SoundTouch_SETTING_USE_AA_FILTER</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">com_young_soundtouch_SoundTouch_SETTING_USE_AA_FILTER</span> <span class="mi">0L</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm">* Class:     com_young_soundtouch_SoundTouch</span>
</span><span class='line'><span class="cm">* Method:    native_getDefaultSampleElementSize</span>
</span><span class='line'><span class="cm">* Signature: ()I</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="nf">Java_com_young_soundtouch_SoundTouch_native_1getDefaultSampleElementSize</span>
</span><span class='line'>    <span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*,</span> <span class="n">jclass</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">文件开头就是普通的头文件</span><span class="err">，</span><span class="n">但是可以发现</span><span class="err">：</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">1</span><span class="o">.</span> <span class="n">包含了jni</span><span class="o">.</span><span class="na">h头文件</span><span class="err">（</span><span class="n">一般位于</span><span class="err">`</span><span class="n">$JAVA_HOME</span><span class="o">/</span><span class="n">jd</span><span class="o">{</span><span class="n">jdk</span><span class="o">-</span><span class="n">version</span><span class="o">}/</span><span class="n">include</span><span class="err">`</span><span class="n">文目录内</span><span class="err">）。</span><span class="n">这是JNI中所有的</span><span class="o">[</span><span class="n">类型</span><span class="o">][</span><span class="n">jni_type</span><span class="o">]</span><span class="err">、</span><span class="n">函数</span><span class="err">、</span><span class="n">宏等定义的地方</span><span class="err">。</span><span class="n">所以C</span><span class="o">/</span><span class="n">C</span><span class="o">++</span><span class="n">世界的JNI是由他制定的游戏规则</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">2</span><span class="o">.</span> <span class="n">在类中生命的常量</span><span class="err">（`</span><span class="kd">static</span> <span class="kd">final</span><span class="err">`）</span><span class="n">类型会在头文件中以宏的形式出现</span><span class="err">，</span><span class="n">这一点还是很方便的</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">3</span><span class="o">.</span> <span class="n">函数的注释还是比较全的</span><span class="err">，</span><span class="n">包括了</span><span class="err">：</span>
</span><span class='line'>     <span class="mi">1</span><span class="o">.</span> <span class="n">对应的class</span>
</span><span class='line'>     <span class="mi">2</span><span class="o">.</span> <span class="n">对应的java方法名</span>
</span><span class='line'>     <span class="mi">3</span><span class="o">.</span> <span class="n">对应java方法的</span><span class="o">[</span><span class="n">签名</span><span class="o">][</span><span class="n">signature</span><span class="o">]</span>
</span><span class='line'> <span class="mi">4</span><span class="o">.</span> <span class="n">方法的声明显得有点奇怪</span><span class="err">，</span><span class="n">由以下及部分组成</span><span class="err">：</span>
</span><span class='line'>     <span class="mi">1</span><span class="o">.</span> <span class="err">`</span><span class="n">JNIEXPORT</span><span class="err">`</span><span class="n">这是函数的导出方式</span>
</span><span class='line'>     <span class="mi">2</span><span class="o">.</span> <span class="n">jint</span> <span class="n">返回值类型</span><span class="err">（</span><span class="n">jint由jni</span><span class="o">.</span><span class="na">h定义</span><span class="err">，</span><span class="n">对应int</span><span class="err">，</span><span class="o">[</span><span class="n">下面</span><span class="o">][</span><span class="n">jni_type</span><span class="o">]</span><span class="n">具体再说吧</span>
</span><span class='line'>     <span class="mi">3</span><span class="o">.</span> <span class="n">JNICALL</span> <span class="n">函数的调用方式也就是汇编级别参数的传入方式</span>
</span><span class='line'>     <span class="mi">4</span><span class="o">.</span>  <span class="n">Java_com_young_soundtouch_SoundTouch_native_1getDefaultSampleElementSize</span> <span class="err">——</span> <span class="n">超级长的函数名</span><span class="err">！！！</span><span class="n">格式是</span><span class="err">`</span><span class="n">Java_</span><span class="err">`</span> <span class="o">+</span> <span class="err">`</span><span class="n">类全名</span><span class="err">`</span> <span class="o">+</span> <span class="err">`</span><span class="n">_</span><span class="err">`</span> <span class="o">+</span> <span class="n">JAVA中声明的native方法名</span><span class="err">。</span><span class="n">其中会把包名中的点</span><span class="err">（`</span><span class="o">.</span><span class="err">`）</span><span class="n">替换成下划线</span><span class="err">（`</span><span class="n">_</span><span class="err">`），</span><span class="n">同时为了避免冲突把下划线替换成</span><span class="err">`</span><span class="n">_1</span><span class="err">`。</span>
</span><span class='line'>     <span class="mi">5</span><span class="o">.</span> <span class="n">方法的参数</span><span class="err">，</span><span class="n">上面的这个方法在JAVA的声明中实际上是没有参数的</span><span class="err">，</span><span class="n">其中的</span><span class="err">`</span><span class="n">JNIENV</span><span class="err">`</span><span class="n">顾名思义是JNI环境</span><span class="err">，</span><span class="n">和具体的线程绑定</span><span class="err">。</span><span class="n">而第二个参数</span><span class="err">`</span><span class="n">jclass</span><span class="err">`</span><span class="n">其实是java中的</span><span class="err">`</span><span class="n">Class</span><span class="err">`</span><span class="n">因为上面是一个</span><span class="err">`</span><span class="kd">static</span><span class="err">`</span><span class="n">方法</span><span class="err">，</span><span class="n">因此第二个参数是</span><span class="err">`</span><span class="n">jclass</span><span class="err">`。</span><span class="n">如果是一个实例方法则对应第二个参数是</span><span class="err">`</span><span class="n">jobject</span><span class="err">`，</span><span class="n">相当于java中的</span><span class="err">`</span><span class="k">this</span><span class="err">`。</span>
</span><span class='line'>
</span><span class='line'><span class="n">下面在C</span><span class="o">/</span><span class="n">C</span><span class="o">++</span><span class="n">中实现这个方法就行啦</span><span class="err">。</span><span class="n">但是在动手前现大致了解以下jni</span><span class="o">.</span><span class="na">h制定的游戏规则</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">####</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">a</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;jni_type&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">类型转换</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="err">：</span>
</span><span class='line'>
</span><span class='line'><span class="n">javah生成的头文件里面使用的类型都是jni</span><span class="o">.</span><span class="na">h定义的</span><span class="err">，</span><span class="n">目的是做到</span><span class="o">**</span><span class="n">平台无关</span><span class="o">**</span><span class="err">，</span><span class="n">比如保证在所有平台上jint都是32位的有符号整型</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span><span class="n">基本对应关系如下</span><span class="err">：</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="o">|</span>  <span class="n">jni</span> <span class="n">类型</span> <span class="o">|</span> <span class="n">JAVA类型</span> <span class="o">|</span> <span class="n">对应本地类型</span>  <span class="o">|</span>  <span class="n">类型</span><span class="o">[</span><span class="n">签名</span><span class="o">][</span><span class="n">signature</span><span class="o">]</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="o">:------:</span> <span class="o">|</span> <span class="o">:------:</span> <span class="o">|</span> <span class="o">:--------:</span> <span class="o">|</span> <span class="o">:----------------:</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jboolean</span> <span class="o">|</span> <span class="kt">boolean</span> <span class="o">|</span> <span class="n">uint8_t</span> <span class="o">|</span> <span class="n">Z</span><span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jbyte</span> <span class="o">|</span> <span class="kt">byte</span> <span class="o">|</span> <span class="kt">char</span> <span class="o">|</span> <span class="n">B</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jcahr</span> <span class="o">|</span> <span class="kt">char</span> <span class="o">|</span> <span class="n">uint16_t</span> <span class="o">|</span> <span class="n">C</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jshort</span> <span class="o">|</span> <span class="kt">short</span> <span class="o">|</span> <span class="n">int16_t</span> <span class="o">|</span> <span class="n">S</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jint</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="n">int32_t</span> <span class="o">|</span> <span class="n">I</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jlong</span> <span class="o">|</span> <span class="kt">long</span> <span class="o">|</span> <span class="n">int64_t</span> <span class="o">|</span> <span class="n">J</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jfloat</span> <span class="o">|</span> <span class="kt">float</span> <span class="o">|</span> <span class="kt">float</span> <span class="o">|</span> <span class="n">F</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="n">jdouble</span> <span class="o">|</span> <span class="kt">double</span> <span class="o">|</span> <span class="kt">double</span> <span class="o">|</span> <span class="n">D</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="kt">void</span> <span class="o">|</span> <span class="kt">void</span> <span class="o">|</span> <span class="kt">void</span> <span class="o">|</span> <span class="n">V</span> <span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span><span class="n">引用类型对应关系</span><span class="err">：</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="o">|</span> <span class="n">java类型</span> <span class="o">|</span>  <span class="n">JNI</span> <span class="n">类型</span> <span class="o">|</span> <span class="n">java类型</span> <span class="o">|</span>  <span class="n">JNI</span> <span class="n">类型</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="o">:-----:</span> <span class="o">|</span> <span class="o">:------:</span> <span class="o">|</span> <span class="o">:------:</span> <span class="o">|</span> <span class="o">:------:</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">所有的实例引用</span> <span class="o">|</span> <span class="n">jobject</span> <span class="o">|</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Class</span> <span class="o">|</span>  <span class="n">jclass</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="o">|</span> <span class="n">jstring</span> <span class="o">|</span> <span class="n">Ocject</span><span class="o">[]</span> <span class="o">|</span> <span class="n">jobjectArray</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Throwable</span> <span class="o">|</span> <span class="n">jthrowable</span> <span class="o">|</span> <span class="n">基本类型</span><span class="o">[]</span> <span class="o">|</span> <span class="n">jxxxArray</span> <span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="n">通过表格发现</span><span class="err">，</span><span class="n">除了上面定义的</span><span class="err">`</span><span class="n">String</span><span class="err">`，`</span><span class="n">Class</span><span class="err">`，`</span><span class="n">Throwable</span><span class="err">`，</span><span class="n">其他的类</span><span class="err">（</span><span class="n">除了数组</span><span class="err">）</span><span class="n">都是以</span><span class="err">`</span><span class="n">jobject</span><span class="err">`</span><span class="n">的形式出现的</span><span class="err">！</span><span class="n">事实上jstring</span><span class="err">，</span> <span class="n">jclass也都是object的子类</span><span class="err">。</span><span class="n">所以这里还是和java层一样</span><span class="err">，</span><span class="n">一切皆jobject</span><span class="err">。（</span><span class="n">当然</span><span class="err">，</span><span class="n">如果jni在C语言中编译的话是没有继承的概念的</span><span class="err">，</span><span class="n">此时jstring</span><span class="err">，</span><span class="n">jclass等其实就是jobject</span><span class="err">！</span><span class="n">用了typedef转换而已</span><span class="err">！！）</span>
</span><span class='line'>
</span><span class='line'><span class="n">接下来是</span><span class="err">`</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="err">`</span><span class="n">这个指针</span><span class="err">，</span><span class="n">他提供了JNI中的一系列操作的接口函数</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">####</span> <span class="n">JNI中操作jobject</span>
</span><span class='line'><span class="n">其实也就是在native层操作java层的实例</span><span class="err">。</span>
</span><span class='line'><span class="n">要操作一个实例无疑是</span><span class="err">：</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">1</span><span class="o">.</span> <span class="n">获取</span><span class="o">/</span><span class="n">设置</span> <span class="err">（</span><span class="n">即</span> <span class="n">get</span><span class="o">/</span><span class="n">set</span> <span class="err">）</span><span class="n">成员变量</span><span class="err">（</span><span class="n">field</span><span class="err">）</span><span class="n">的值</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">2</span><span class="o">.</span> <span class="n">调用成员方法</span><span class="err">（</span><span class="n">method</span><span class="err">）</span>
</span><span class='line'>
</span><span class='line'><span class="n">所以问题来了</span><span class="err">：（</span><span class="n">挖掘机技术哪家强</span><span class="err">？！</span> <span class="n">o</span><span class="o">(*</span><span class="err">≧▽≦</span><span class="o">)</span><span class="n">ツ</span><span class="err">┏━┓</span> <span class="err">）</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span><span class="n">怎么得到field</span> <span class="n">和</span> <span class="n">method</span><span class="err">？</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="n">通过使用</span><span class="o">**</span><span class="n">jfieldID和jmethodID</span><span class="o">**</span><span class="err">：</span>
</span><span class='line'><span class="n">在JNI中使用类似于放射的方式来进行field和method的操作</span><span class="err">。</span><span class="n">JNI中使用jfieldID和jmethodID来表示成员变量和成员方法</span><span class="err">，</span><span class="n">获取方式是</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">jfieldID</span> <span class="nf">GetFieldID</span><span class="o">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">name</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sig</span><span class="o">);</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="nf">GetStaticFieldID</span><span class="o">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">name</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sig</span><span class="o">);</span>
</span><span class='line'><span class="n">jmethodID</span> <span class="nf">GetMethodID</span><span class="o">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">name</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sig</span><span class="o">);</span>
</span><span class='line'><span class="n">jmethodID</span> <span class="nf">GetStaticMethodID</span><span class="o">(</span><span class="n">jclass</span> <span class="n">clazz</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">name</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sig</span><span class="o">)</span> <span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中最后一个参数是<a href="#signature">签名</a>。
<strong>获取jclass的方法</strong>除了实用上面静态方法的第二个参数外，还可以手动获取。
<code>jclass FindClass(const char *name)</code>
需要注意的是<code>name</code>参数，他是一个类包括包名的全称，但是需要把包名中的点<code>.</code>替换成斜杠<code>/</code>。（好吧，事实上我不是太明白为啥要这么做。）</p>

<p>有了jfieldID和jmethodID就知道狗蛋住哪了，现在去狗蛋家找他玩 ♪(^∇^*)</p>

<p><strong>成员变量:</strong></p>

<ol>
<li><p>get:</p>

<ol>
<li><p><code>&lt;type&gt; Get&lt;type&gt;Field(jobject , jfieldID);</code>即可获得对应的field，其中field的类型是type，可以是上面<a href="#jni_type">类型</a>所叙述的任何一种。</p></li>
<li><p><code>&lt;type&gt; GetStatic&lt;type&gt;Field(jobject , jfieldID);</code>同1，唯一的区别是用来获取静态成员。</p></li>
</ol>
</li>
<li><p>set:</p>

<ol>
<li><p><code>void Set&lt;type&gt;Field(jobject obj, jfieldID fieldID, &lt;type&gt; val)</code></p></li>
<li><p><code>void SetStatic&lt;type&gt;Field(jclass clazz, jfieldID fieldID, &lt;type&gt; value);</code></p></li>
</ol>
</li>
</ol>


<p><strong>成员方法：</strong></p>

<p>调用方法自然要把方法的参数传递进去，JNI中实现了三种参数的传递方式：</p>

<ol>
<li><p><code>Call&lt;type&gt;Method(jobject obj, jmethod jmethodID, ...)</code>其中<code>...</code>是C中的可变长参数，类似于<code>printf</code>那样，可以传递不定长个参数。于是你可以把java方法需要的参数在这里面传递进去。</p></li>
<li><p><code>Call&lt;type&gt;MethodV(jobject obj, jmethodID methodID, va_list args)</code>其中的<code>va_list</code>也是C中可变长参数相关的内容（我不了解，不敢瞎说。。。偷懒粘一下Oracle的文档）Programmers place all arguments to the method in an args argument of type va_list that immediately follows the methodID argument. The Call<type>MethodV routine accepts the arguments, and, in turn, passes them to the Java method that the programmer wishes to invoke.</p></li>
<li><p><code>Call&lt;type&gt;MethodA(jobject obj, jmethodID methodID, const jvalue * args)</code>哎！这个我知道可以说两句LOL~~这里的<code>jvalue</code>通过查代码发现就是JNI中各个数据类型的union，所以可以使用任何类型复制！所以参数的传入方式是通过一个jvalue的数组，数组内的元素可以是任何jni类型。</p></li>
</ol>


<p>然后问题又来了：（挖掘机技术到底哪家强？！o(*≧▽≦)ツ┏━┓）
如果传进来的参数和java声明的参数的不一致会怎么样！（即不符合<a href="#signature">方法签名</a>）这里文档中没用明确解释，但是说道:</p>

<blockquote><p>Exceptions raised during the execution of the Java method.</p></blockquote>

<pre><code class="java">typedef union jvalue {
    jboolean z;
    jbyte    b;
    jchar    c;
    jshort   s;
    jint     i;
    jlong    j;
    jfloat   f;
    jdouble  d;
    jobject  l;
} jvalue;
</code></pre>

<ol>
<li>调用实例方法（instance method）：

<ol>
<li><code>&lt;type&gt; Call&lt;type&gt;Method(jobject obj, jmethodID methodID, ...);</code>调用一个具有<code>&lt;type&gt;</code>类型返回值的方法。</li>
<li><code>&lt;type&gt; Call&lt;type&gt;MethodV(jobject obj, jmethodID methodID, va_list args);</code></li>
<li><code>Call&lt;type&gt;MethodA(jobject obj, jmethodID methodID, const jvalue * args)</code></li>
</ol>
</li>
<li>调用静态方法（static method）：

<ol>
<li><code>&lt;type&gt; CallStatic&lt;type&gt;Method(jobject obj, jmethodID methodID, ...);</code></li>
<li><code>&lt;type&gt; CallStatic&lt;type&gt;MethodV(jobject obj, jmethodID methodID, va_list args);</code></li>
<li><code>CallStatic&lt;type&gt;MethodA(jobject obj, jmethodID methodID, const jvalue * args)</code></li>
</ol>
</li>
<li>调用父类方法（super.method)，这个就有点不一样了。多了一个jclass参数，jclass可以使obj的父类，也可以是obj自己的class，但是methodID必须是从jclass获取到的，这样就可以调用到父类的方法。

<ol>
<li><code>&lt;type&gt; CallNonvirtual&lt;type&gt;Method(jobject obj, jclass clazz, jmethodID methodID, ...)</code></li>
<li><code>&lt;type&gt; CallNonvirtual&lt;type&gt;MethodV(JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args);</code></li>
<li><code>&lt;type&gt; CallNonvirtual&lt;type&gt;MethodA(JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, const jvalue *args);</code></li>
</ol>
</li>
</ol>


<h4>数组的操作</h4>

<p>数组是一个很常用的数据类型，在但是在JNI中并不能直接操作jni数组（比如jshortArray，jfloatArray）。使用方法是：</p>

<ol>
<li>获取数组长度：<code>jsize GetArrayLength(jarray array)</code></li>
<li>创建新数组： <code>ArrayType New&lt;PrimitiveType&gt;Array(jsize length);</code></li>
<li>通过JNI数组获取一个C/C++数组：<code>&lt;type&gt;* Get&lt;type&gt;ArrayElements(jshortArray array, jboolean *isCopy)</code></li>
<li>指定原数组的范围获取一个C/C++数组（该方法只针对于原始数据数组，不包括Object数组）：<code>void Get&lt;PrimitiveType&gt;ArrayRegion(JNIEnv *env, ArrayType array, jsize start, jsize len, NativeType *buf);</code></li>
<li>设置数组元素：<code>void Set&lt;type&gt;ArrayRegion(jshortArray array, jsize start, jsize len,const &lt;type&gt; *buf)</code>。again，如果是Object数组需要使用：<code>void SetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index, jobject value);</code></li>
<li>使用完之后，释放数组：<code>void Release&lt;type&gt;ArrayElements(jshortArray array, jshort *elems, jint mode)</code></li>
</ol>


<p>有点要说明的：</p>

<ol>
<li><p>上面的3中的isCopy：当你调用getArrayElements时JVM（Runtime）可以直接返回数组的原始指针，或者是copy一份，返回给你，这是由JVM决定的。所以isCopy就是用来记录这个的。他的值是<code>JNI_TURE</code>或者<code>JNI_FALSE</code>。</p></li>
<li><p>6释放数组。<strong>一定要释放你所获得数组</strong>。其中有一个<code>mode</code>参数，其有三个可选值，分别表示：</p></li>
<li><p> 0</p>

<ul>
<li><p>原始数组：允许原数组被垃圾回收。</p></li>
<li><p>copy： 数据会从get返回的buffer copy回去，同时buffer也会被释放。</p></li>
</ul>
</li>
<li><p> JNI_COMMIT</p>

<ul>
<li><p>原始数组：什么也不做</p></li>
<li><p>copy： 数据会从get返回的buffer copy回去，同时buffer<strong>不会</strong>被释放。</p></li>
</ul>
</li>
<li><p> JNI_ABORT</p>

<ul>
<li><p>原始数组：允许原数组被垃圾回收。之前由JNI_COMMIT提交的对数组的修改将得以保留。</p></li>
<li><p>copy： buffer会被释放，同时buffer中的修改将不会copy回数组！</p></li>
</ul>
</li>
</ol>


<h4>关于引用与垃圾回收</h4>

<p>比如上面有个方法传了一个jobject进来，然后我把她保存下来，方便以后使用。这样做是<strong>不行哒</strong>！因为他是一个LocalReference，所以不能保证jobject指向的真正的实例不被回收。也就是说有可能你用的时候那个指针已经是个野指针的。然后你的程序就直接Segment Fault了，呵呵。。。</p>

<p>在JNI中提供了三种类型的引用：</p>

<ol>
<li>Local Reference：即本地引用。在JNI层的函数，所有非全局引用对象都是Local Reference， 它包括函数调用是传入的jobject和JNI成函数创建的jobject。Local Reference的特点是一旦JNI层的函数返回，这些jobject就可能被垃圾回收。</li>
<li>Glocal Reference：全局引用，这些对象不会主动释放，永远不会被垃圾回收。</li>
<li>Weak Glocal Reference：弱全局引用，一种特殊的Global Reference，在运行过程中有可能被垃圾回收。所以使用之前需要使用<code>jboolean IsSameObject(jobject obj1, jobject obj2)</code>判断它是否已被回收。</li>
</ol>


<p>Glocal Reference:<br/>
 1. 创建：<code>jobject NewGlobalRef(jobject lobj);</code><br/>
 2. 释放：<code>void DeleteGlobalRef(jobject gref);</code></p>

<p>Local Reference:<br/>
LocalReference也有一个释放的函数：<code>void DeleteLocalRef(jobject obj)</code>，他会立即释放Local Reference。
这个方法可能略显多余，其实也是有它的用处的。刚才说Local Reference会再函数返回后释放掉，但是假如函数返回前就有很多引用占了很多内存，最好函数内就尽早释放不必要的内存。</p>

<h4>关于JNI_OnLoad<a name="jni_onload"></a></h4>

<p>开头提到JNI_OnLoad是java1.2中新增加的方法，对应的还有一个JNI_OnUnload，分别是动态库被JVM加载、卸载的时候调用的函数。有点类似于WIndows里的DllMain。<br/>
前面提到的实现对应native的方法是实现javah生成的头文件中定义的方法，这样有几个弊端：</p>

<ol>
<li>函数名太长。很长。。相当长。。。</li>
<li>函数会被导出，也就谁说可以在动态库的导出函数表里面找到这些函数。这将有利于别人对动态库的逆向工程，因此带来安全问题。</li>
</ol>


<p>现在有了JNI_OnLoad，情况好多了。你不光能在其中完成动态注册native函数的工作还可以完成一些初始化工作。java对应的有了<code>jint RegisterNatives(jclass clazz, const JNINativeMethod *methods,jint nMethods)</code>函数。参数分别是：</p>

<ol>
<li><p>jclass clazz，于native层对应的java class</p></li>
<li><p>const JNINativeMethod *methods这是一个数组，数组的元素是JNI定义的一个结构体JNINativeMethod</p></li>
<li><p>上面的数组的长度</p></li>
</ol>


<p><strong>JNINativeMethod</strong>：代码中的定义如下：</p>

<pre><code class="java">
/*
 * used in RegisterNatives to describe native method name, signature,
 * and function pointer.
 */

typedef struct {
    char *name;
    char *signature;
    void *fnPtr;
} JNINativeMethod;
</code></pre>

<p>所以他有三个字段，分别是</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 字段 </th>
<th style="text-align:left;"> 含义 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">char *name </td>
<td style="text-align:left;"> java class中的native方法名，只需要方法名即可 </td>
</tr>
<tr>
<td style="text-align:left;"> char *signature </td>
<td style="text-align:left;"> 方法<a href="#signature">签名</a></td>
</tr>
<tr>
<td style="text-align:left;"> void *fnPtr </td>
<td style="text-align:left;"> 对应native方法的函数指针 </td>
</tr>
</tbody>
</table>


<p>于是现在你可以不用导出native函数了，而且可以随意给函数命名，唯一要保证的是参数及返回值的统一。然后需要一个<code>const JNINativeMethod *methods</code>数组来完成映射工作。</p>

<p>看起来大概是这样的:</p>

<pre><code class="cpp">//只需导出JNI_OnLoad和JNI_OnUnload（这个函数不实现也行）
/**
 * These are the exported function in this library.
*/
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved);
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved);

//为了在动态库中不用导出函数，全部声明为static
//native methods registered by JNI_OnLoad
static jint native_newInstance (JNIEnv *env, jclass);

//实现native方法
/*
* Class:     com_young_soundtouch_SoundTouch
* Method:    native_newInstance
* Signature: ()I
*/
static jint native_newInstance
(JNIEnv *env, jclass ) {
    int instanceID = ++sInstanceIdentifer;
    SoundTouchWrapper *instance = new SoundTouchWrapper();
    if (instance != NULL) {
        sInstancePool[instanceID] = instance;
        ++sInstanceCount;
    }
    LOGDBG("create new SouncTouch instance:%d", instanceID);
    return instanceID;
}

//构造JNINativeMethod数组
static JNINativeMethod gsNativeMethods[] = {
        {
            "native_newInstance",
            "()I",
            reinterpret_cast&lt;void *&gt; (native_newInstance)
        }
}；
//计算数组大小
static const int gsMethodCount = sizeof(gsNativeMethods) / sizeof(JNINativeMethod)；

//JNI_OnLoad，注册native方法。
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv* env;
    jclass clazz;
    LOGD("JNI_OnLoad called");
    if (vm-&gt;GetEnv(reinterpret_cast&lt;void**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) {
        return -1;
    }
    //FULL_CLASS_NAME是个宏定义，定义了对应java类的全名（要把包名中的点(.)_替换成斜杠(/)）
    clazz = env-&gt;FindClass(FULL_CLASS_NAME);
    LOGDBG("register method, method count:%d", gsMethodCount);
    //注册JNI函数
    env-&gt;RegisterNatives(clazz, gsNativeMethods,
        gsMethodCount);
    //必须返回一个JNI_VERSION_1_1以上（不含）的版本号，否则直接加载失败
    return JNI_VERSION_1_6;
}
</code></pre>

<h3>实战技巧篇</h3>

<p>这里主要是巧用C中的宏来减少重复工作：</p>

<h4>迅速生成全名</h4>

<pre><code class="cpp">//修改包名时只需要改以下的宏定义即可
#define FULL_CLASS_NAME "com/young/soundtouch/SoundTouch"
#define func(name) Java_ ## com_young_soundtouch_SoundTouch_ ## name
#define constance(cons) com_young_soundtouch_SoundTouch_ ## cons
</code></pre>

<p>比如<code>func(native_1newInstance)</code>展开成：<code>Java_com_young_soundtouch_SoundTouch_native_1newInstance</code>即JNI中需要导出的函数名（不过用动态注册方式没太大用了）</p>

<p><code>constance(AUDIO_FORMAT_PCM16)</code>展开成<code>com_young_soundtouch_SoundTouch_AUDIO_FORMAT_PCM16</code>这个着实有用。</p>

<p>而且如果包名改了也可以很方便的适应之。</p>

<h3>安卓的log</h3>

<pre><code class="cpp">//define __USE_ANDROID_LOG__ in makefile to enable android log
#if defined(__ANDROID__) &amp;&amp; defined(__USE_ANDROID_LOG__)
#include &lt;android/log.h&gt;
#define LOGV(...)   __android_log_print((int)ANDROID_LOG_VERBOSE, "ST_jni", __VA_ARGS__)
#define LOGD(msg)  __android_log_print((int)ANDROID_LOG_DEBUG, "ST_jni_dbg", "line:%3d %s", __LINE__, msg)
#define LOGDBG(fmt, ...) __android_log_print((int)ANDROID_LOG_DEBUG, "ST_jni_dbg", "line:%3d " fmt, __LINE__, __VA_ARGS__)
#else
#define LOGV(...) 
#define LOGD(fmt) 
#define LOGDBG(fmt, ...) 
#endif
</code></pre>

<p>通过这样的宏定义在打LOGD或者LOGDBG的时候还能自动加上行号！调试起来爽多了！</p>

<h4>C++中清理内存的方式</h4>

<p>由于C++里面需要手动清楚内存，因此我的解决方案是定义一个map，给每个实例一个id，用id把java中的对象和native中的对象绑定起来。在java层定义一个<code>release</code>方法，用来释放本地的对象。
本地的 KEY-对象 映射
<code>static std::map&lt;int, SoundTouchWrapper*&gt; sInstancePool;</code></p>

<h4>关于NDK</h4>

<p>因为安卓的约定是把本地代码放到jni目录下面，但是假如有多个jni lib的时候会比较混乱，所以方案是每一个lib都在jni里面建一个子目录，然后jni里面的Android.mk就可以去构建子目录中的lib了。</p>

<p>jni/Android.mk如下（超级简单）：
<code>makefile
LOCAL_PATH := $(call my-dir)
include $(call all-subdir-makefiles)
</code></p>

<p>然后在子目录soundtouch_module中的Android.mk就可以像一般的Android.mk一样书写规则了。</p>

<p>同时记录一下在Andoroid.mk中使用makefile内建函数<code>wildcard</code>的方法。
有时候源文件是一个目录下的所有.cpp/.c文件，这时候<code>wildcard</code>来统配会很方便。但是Android.mk与普通的Makefile的不同在于：</p>

<ol>
<li>调用Android.mkmingling的${CWD}并不是Android.ml所在的目录。所以Android.mk中有一个变量<code>LOCAL_PATH := $(call my-dir)</code>来记录当前 Android.mk所在的目录。</li>
<li>同时还会把所有的<code>LOCAL_SRC_FILES</code> 前面加上<code>$(LOCAL_PATH)</code>这样写makefile的时候就可以用相对路径了，提供了方便。但是这也导致了坑！</li>
</ol>


<p>因为1，直接使用相对路径会导致<code>wildcard</code>匹配不到源文件。所以最好这么写<code>FILE_LIST := $(wildcard $(LOCAL_PATH)/soundtouch_source/source/SoundTouch/*.cpp)</code>。然而又因为2，这样还是不行的。所以还需要匹配之后把<code>$(LOCAL_PATH)</code>的部分去掉，因此还得这样<code>$(FILE_LIST:$(LOCAL_PATH)/%=%)</code>.</p>

<p>还有个小tip：<code>LOCAL_CFLAGS</code>中最好加上这个定义<code>-fvisibility=hidden</code>这样就不会在动态库中导出不必要的函数了。</p>

<h3>附录<a name="signature">签名</a></h3>

<p>JAVA中的函数签名包括了函数的参数类型，返回值类型。因此即使是重载了的函数，其函数签名也不一样。java编译器就会根据函数签名来判断你调用的到地址哪个方法。
签名中表示类型是这样的</p>

<p>1.基本类型都对应一个大写字母，如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> JAVA类型 </th>
<th style="text-align:center;">  类型签名 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> boolean </td>
<td style="text-align:center;"> Z </td>
</tr>
<tr>
<td style="text-align:center;">byte </td>
<td style="text-align:center;"> B </td>
</tr>
<tr>
<td style="text-align:center;"> char  </td>
<td style="text-align:center;"> C </td>
</tr>
<tr>
<td style="text-align:center;"> short </td>
<td style="text-align:center;"> S </td>
</tr>
<tr>
<td style="text-align:center;"> int </td>
<td style="text-align:center;"> I </td>
</tr>
<tr>
<td style="text-align:center;"> long </td>
<td style="text-align:center;"> J </td>
</tr>
<tr>
<td style="text-align:center;"> float </td>
<td style="text-align:center;"> F </td>
</tr>
<tr>
<td style="text-align:center;"> double </td>
<td style="text-align:center;"> D </td>
</tr>
<tr>
<td style="text-align:center;"> void </td>
<td style="text-align:center;"> V </td>
</tr>
</tbody>
</table>


<p>2.如果是类则是：
L + 类全名（报名中的点(.)用(/)代替）+ ；
比如java.lang.String 对应的是 <code>Ljava/lang/String;</code></p>

<p>3.如果是数组，则在前面加<code>[</code>然后加类型签名，几位数组就加几个<code>[</code>
比如int[]对应<code>[I</code>，boolean[][] 对应 <code>[[Z</code>，java.lang.Class[]对应<code>[Ljava/lang/Class;</code></p>

<p>可以通过javap命令来获取签名（javah生成的头文件注释中也有签名）:<code>javap -x -p &lt;类全名&gt;</code>
坑爹的是java中并不能通过反射来获取方法签名，需要自己写一个帮助类。
（其实我还写了个小程序可以自动生成签名，和JNI_OnLoad中注册要用到的<code>JNINativeMethod</code>数组，从此再也不用糟心的去写那该死的数组了。LOL~~~）</p>

<p>[全文完]</p>

<h4>参考资料</h4>

<p>[1] : <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html">Oracle java SE documents</a></p>

<p>[2] : <a href="http://baike.baidu.com/view/6415820.htm">深入理解Android 卷 1</a> 第二章 ，邓凡平著，机械工业出版社</p>

<p>[3]: <a href="http://developer.android.com/training/articles/perf-jni.html">Google Android documents &ndash; JNI Tips</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run commamd before build in IntelliJ IDEA]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/10/14/run-commamd-before-build-in-intellij-idea/"/>
    <updated>2014-10-14T17:22:29+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/10/14/run-commamd-before-build-in-intellij-idea</id>
    <content type="html"><![CDATA[<p>I came across <a href="http://stackoverflow.com/questions/8380693/run-e-g-calc-exe-before-build-in-intellij-with-android-projects">this question at <code>StackOverflow</code></a> when I was searching the same question in Google.</p>

<p>I found that you don&rsquo;t need a ant build script, that is just use the IntelliJ default system is just fine. For example, I am doing my project with android-ndk, so I want intelliJ run <code>ndk-build NDK_DEBUG=1 -j4</code> before normal build.
 <!--more--></p>

<p>Here is the solution:</p>

<ol>
<li>Run -> Editor configuration</li>
<li>Select on of you build configuration in the left side of the dialog.</li>
<li>On the right side there is an area marked as <strong>Before Launch</strong></li>
<li>Click the &ldquo;plus&rdquo; button, choose <code>Run External Tool</code> in the popup menu.</li>
<li>Click the &ldquo;plus&rdquo; button in the new popup window</li>
<li>Then you get into the real configuration window.</li>
</ol>


<p>Let me show you some fine picture:</p>

<p>1. Select on of you build configuration in the left side of the dialog.</p>

<p><img src="/assets/storage/run_commamd_before_build_in_intellij/step1.png" alt="Select on of you build configuration in the left side of the dialog." /></p>

<p>2. On the right side there is an area marked as <strong>Before Launch</strong></p>

<p><img src="/assets/storage/run_commamd_before_build_in_intellij/step2.png" alt="On the right side there is an area marked as **Before Launch** " /></p>

<p>3. Select on of you build configuration in the left side of the dialog.</p>

<p> <img src="/assets/storage/run_commamd_before_build_in_intellij/step3.png" alt="enter image description here" /></p>

<p>4. Click the &ldquo;plus&rdquo; button in the new popup window</p>

<p><img src="/assets/storage/run_commamd_before_build_in_intellij/step4.png" alt="Click the &quot;plus&quot; button in the new popup window" /></p>

<p>5. Then you get into the real configuration window.</p>

<p><img src="/assets/storage/run_commamd_before_build_in_intellij/step5.png" alt="Then you get into the real configuration window." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java(Android)中线程池的使用]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong/"/>
    <updated>2014-09-23T17:39:40+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong</id>
    <content type="html"><![CDATA[<p>java SE5提供了<code>java.util.concurrent.Executors</code>类来实现线程池的功能。
<em>Thinking in Java</em> 中这么解释Executors：</p>

<blockquote><p><code>Executors</code>允许你执行异步的任务（task）而不用显式的去管理线程的生命周期。</p></blockquote>

<p>可以说Executors是线程们的管理者，让线程们的生存方式从<strong>放养</strong>变成了<strong>圈养</strong>。Executors来处理一次能同时运行多少个线程，哪个线程在哪个线程的后面执行。总的来说Executors之于线程就像操作系统止于进程一样——管理者与被管理者的关系。</p>

<!--more-->


<p><strong>new Thread的弊端如下：</strong></p>

<ol>
<li><p>每次new Thread新建对象性能差。</p></li>
<li><p>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</p></li>
<li><p>缺乏更多功能，如定时执行、定期执行、线程中断。</p></li>
</ol>


<p><strong>相比new Thread，Java提供的四种线程池的好处在于：</strong></p>

<ol>
<li><p>重用存在的线程，减少对象创建、消亡的开销，性能佳。</p></li>
<li><p>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</p></li>
<li><p>提供定时执行、定期执行、单线程、并发数控制等功能。</p></li>
</ol>


<p>（上述比较摘自：<a href="http://www.trinea.cn/android/java-android-thread-pool/">http://www.trinea.cn/android/java-android-thread-pool/</a> ）</p>

<p>Executors的使用静态方法来创建相应的<code>ExecutorService</code>接口实现，如下：</p>

<ul>
<li><code>Executors.newCachedThreadPool()</code></li>
<li><code>Executors.newFixedThreadPool()</code></li>
<li><code>Executors.newScheduledThreadPool()</code></li>
<li><code>Executors.newSingleThreadExecutor()</code></li>
</ul>


<p> 这些线程池分别具有不同的能力：
 （Java Concurrency in Pratice——java编程实践，如下解释）</p>

<ul>
<li><p>newFixedThreadPool：创建一个定长的线程池，每提交一个任务就创建一个线程，直到达到池的最大长度，这时线程池会保持长度不再变化（如果一个线程由于未预期的Exception而结束，线程池会补充一个新线程）。</p></li>
<li><p>newCachedThreadPool：创建一个可缓存的线程池，如果当前线程池的长度超过了处理的需要时，它可以灵活的回收空闲的线程，当需要增加时，它可以灵活的添加新的线程，而不会对池的长度作任何限制。</p></li>
<li><p>newSingleThreadExecutor：创建一个单线程化的executor，它只创建唯一的worker线程来执行任务，如果这个线程异常结束，会有另一个取代它。executor会保证任务依照任务队列规定的顺序（FIFO，LIFO，优先级）执行。</p></li>
<li><p>newScheduledThreadPool：创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer。</p></li>
</ul>


<h3>ExecutorService的使用</h3>

<p><code>ExecutorService</code>接口继承自Executor的接口定义，他提供了一个线程池应该实现的方法定义，包括运行/提交新任务的方法，结束任务的方法，等等。
<code>ExecutorService</code>的接口有：</p>

<p><strong>提交任务</strong>：</p>

<ul>
<li><p><code>execute</code>（该方法继承自Executor）提交一个runnable接口封装的task，没有返回值</p></li>
<li><p><code>submit</code> 提交一个Callable或者Runnable接口封装的任务，返回一个Feature。</p></li>
<li><p><code>invokeAll</code>传入一个task的容器，执行其包含的所有task。</p></li>
<li><p><code>invokeAny</code>传入一个task的容器，只要其中一个task异常终止，就结束其他task（如果还没执行就不再执行）。</p></li>
</ul>


<p><strong>终止线程池</strong>：</p>

<ul>
<li><p><code>shotdown</code>线程池停止接受新的task，所有已有task执行完后线程池随即关闭</p></li>
<li><p><code>shutdownNow</code>立即终止线程池内的所有task，关闭线程池</p></li>
</ul>


<p><strong>重要的一点</strong>：因为只要有一个非Daemon线程运行着，就会阻止JVM的正常退出。所以线程池一定要记得shutdown！</p>

<p>所以向ExecutorService提交的任务可以是通过<code>Runnable</code>或者<code>Callable</code>接口封装的，其中Callable接口带有一个类型参数，表示返回值的类型。Runable可以使用execute方法，提交。但是Runnable和Callable都可以使用submit方法提交。execute方法没有返回值，submit方法会返回一个Future<T>类型，可以查看任务的执行状态以及获取任务的返回）。所以当你想要一个任务完成时返回一个返回值，submit将是你的不二之选（不要三四千，不要一两千，只要998，submit抱回家）。</p>

<p><strong>关于Future<T></strong></p>

<p>Future功能强大，提供了对任务的各种操作：</p>

<ul>
<li><p><code>isDone()</code> 返回任务是否已经执行完成</p></li>
<li><p><code>get()</code>返回任务的返回值，如果调用get的时候任务还没有完成，则会阻塞知道任务完成</p></li>
<li><p><code>get(long timeout, TimeUnit unit)</code>同上，但是多了个参数，表示阻塞的最大时长。如果在设定的最大阻塞时长内没有指定任务没有顺利结束并返回结果，该方法会抛出一个<code>java.util.concurrent.TimeoutException</code>。</p></li>
<li><p><code>cancel(boolean mayInterruptIfRunning)</code> 尝试去取消一个任务的执行，如果一个任务已经结束，或者已经被取消，或者因为一些什么原因不能够取消，则会取消失败，同时返回false。如果一个任务还没有开始执行就被取消了，那么它将不再执行。如果这个方法被调用的时候，任务正在执行，则将由参数<code>mayInterruptIfRunning</code>决定是否终止正在运行的task。</p></li>
<li><p><code>isCancelled()</code> 返回任务是否已经被取消</p></li>
</ul>


<p>了解过强大的Future是否觉得execute可以去死了，连个Future都返回不了，事实上并非如此，因为submit最终调用的还是execute-_-其实现方法是给execute传入一个RunnableFuture接口的实例（在标准库里有一个很好的实现叫FutureTask），RunnableFuteure接口定义了一个觉有Future功能的Runnalbe。想自定义Future就可以通过这种方式。</p>

<p>submit也是可以传入Runnable的，当传入Runnable时会怎样呢：</p>

<ul>
<li><p>当使用 <code>submit(Runnable)</code>时，返回一个<code>Future&lt;?&gt;</code>，它的get方法会返回null，除此之外其他方法调用表现正常。</p></li>
<li><p>当使用<code>submit(Runnable task, T result)</code>时，返回一个Future<T>，它的get方法会返回result。就好比task是一个会返回result的Callable。</p></li>
</ul>


<p>另外一个小tip就是Executors提供了Runnable转Callabe的静态方法：</p>

<ul>
<li><p><code>public static &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result)</code>将Runnable转换成能返回result的Callable接口</p></li>
<li><p><code>public static Callable&lt;Object&gt; callable(Runnable task)</code>将Runnable转换成返回null的Callable接口</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
