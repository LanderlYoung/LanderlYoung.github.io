<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dictonary_Node.js | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/blog/categories/dictonary-node-dot-js/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-02-19T23:47:24+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-版本v1.0]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0/"/>
    <updated>2014-02-19T18:31:45+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>这个小工具需要的功能有以下几个：</p>

<ul>
<li>解析命令行参数</li>
<li>发送http请求并取得返回的xml</li>
<li>解析xml并得到单词的解释</li>
<li>输出结果</li>
</ul>


<!--more-->


<p>最后还有一个，不过在v1.0中没有加入：</p>

<ul>
<li>发送http请求，获得单词发音，并播放出来</li>
</ul>


<p>下面一部分一部分的把各个功能实现说明一下：</p>

<h3>1.解析命令行参数</h3>

<p>这里的重点是获取命令行参数，在Node.js里面命令行参数可以从<code>process.argv</code>获取。
得到的是一个string数组，数组的第一项是node解释器的调用名，一般是<code>node</code>;第二项是js脚本的绝对路径，后面的各项就是传进去的命令行参数。于是得到下面的解析命令行参数的代码。</p>

<p>``` cpp</p>

<p>//command line arguments
var argv = process.argv.splice(2);</p>

<p>(function(){</p>

<pre><code>if (argv.length == 0 || argv.length &gt; 2) {
    usage();
    process.exit(1);
} else if( argv.length == 1) {
    word = argv[0];
} else {
    var swt = argv[0];
    word = argv[1];
    if( swt.search(/e|E/) != -1) {
        ee = true;
    }
    if( swt.search(/p|P/) != -1) {
        pnc = true;
    }
    if( swt.search(/v/) != -1) {
        ee = cc = true;
    }
    if(swt.search(/V/) != -1) {
        pnc = true;
        ee = cc = true;
    }
}
</code></pre>

<p>})();</p>

<p>```</p>

<h3>2.发送http请求并取得返回的xml</h3>

<p>说到这个话题，最先想到的是AJAX，不过在Node.js里面对http request 有另一种封装。</p>

<p>代码中的 http 来自于源代码最前面的 <code>var  http = require("http");</code></p>

<p>``` cpp
var req = http.request(queryURL,  function(res) {</p>

<pre><code>var chunks = [], length = 0;
res.on('data', function(trunk) {
    length += trunk.length;
    chunks.push(trunk);
});
res.on('end', function() {
    var data = new Buffer(length),
    pos = 0, 
    l = chunks.length;
for (var i = 0; i &lt; l; i++) {
    chunks[i].copy(data, pos);
    pos += chunks[i].length;
}

res.body = data;
//TODO
//console.log(data.toString());
var output = genOutput(data.toString());
show(output);

});
res.on('error', function(err){
    //FIXME
    console.log("requesr error");
});
</code></pre>

<p>});
req.end();</p>

<p>```
这里面主要做事的是三个回调函数，分别是当得到数据、数据下载结束、发生错误。
代码所做的事是，把每次得到的数据缓存起来；当数据下载结束时把缓存的数据拼接起来。需要说明的是：在代码中用到了Node.js的Buffer类，其中on &lsquo;data&rsquo; 时的回调函数的参数就是Buffer类的实例。在一开始出现的问题是：设置了返回的xml的编码，然后就出现了乱码，猜测原因是每次on &lsquo;data&rsquo; 时传来的数据段把utf-8编码截断了。解决方法是先把返回数据当成二进制来处理，最后拼接起来再转成字符串。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-项目启航]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang/"/>
    <updated>2014-01-05T22:32:13+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>一直以来都很想学习一下web技术，HTML5, CSS3, Javascript，前段时间算是终于闲下来了（其实是好多课没有意思，不想去上了），于是学习了一下，同时还写了一个Chrome 应用  <a href="https://github.com/LanderlYoung/Magnet2Torrent">Magent2Torrent</a>。了解javascript之后发现她真是一个灵活可爱的语言，也可能是我接触的第一个动态语言（或者叫弱类型语言），总觉得她有着无限的魅力。同时还喜欢上了JSON！</p>

<p>前一段时间（在这个github博客搭建之前）玩了一下<a href="http://www.nodejs.org">Node.js</a>，发现这真是个好东西，我可以在本地执行javascript脚本了, 尽管Node.js的设计初衷并非如此……（我这是玩得有点偏了）虽然和python等本地执行的脚本语言在API上还有差距，鉴于Node.js可以使用C++模块（add on），也算是功能完备了。</p>

<!--more-->


<p>之前用过一个python写的脚本，可以请求有道网页版的词典，然后解析得到的html内容，行命令行输出单词解释，于是我冒出了用javascript+Node.js实现上述功能的想法。
与之前的python脚本不同的是，我打算使用有到的API来查询单词。</p>

<p>鉴于有到词典的查询API需要申请，且免费用户查询次数有限，我决定使用wireshark抓包来得到官方
API。抓包的应用是win8上的有道词典。得到的数据如下：</p>

<p>``` cpp
GET /search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=store HTTP/1.1</p>

<p>Host: dict.youdao.com</p>

<p>&hellip; &hellip;
```</p>

<p>可以从中看到各个参数，其中参数q就是我们要查询的单词，此处是node。其他参数事实上并不需要考虑太多，不过秉承着geek精神还是看一下为好。</p>

<hr />

<ul>
<li>keyfrom明显意思是数据来源，此处是metrodict.main和win8客户段吻合。</li>
<li>xmlDetail看来是个bool类型，此处为true，可以猜测如果为false可能返回解释会比较简单。</li>
<li>doctype肯定是文档类型，此处是xml。</li>
<li>xmlVersion，xml文档的版本。</li>
<li>dog.Version, 又是某个东西的版本。</li>
<li><strong>q</strong>就是要查询的单词了。</li>
<li>le看来是语言的意思，le = language，值是eng表示英语english。</li>
<li>kerfrom和前文一样。client是客户端，这里是metrodict就是win8的词典啦。</li>
<li>id，卧槽！这么长，估计申请到的id就是这样，这个id肯定是有道官方使用的id（绝对没有查询次数限制，哦吼吼！）</li>
<li>appVersion指定客户端应用版本。</li>
<li>vender不清楚什么意思，不管他啦。</li>
</ul>


<hr />

<p>总结下来两个有用的参数xmlDetail和q。打开chrome验证一下看看是不是。</p>

<p> 1.xmlDetail=true版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p> 2.xmlDetail=false版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=false&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p>额。。。有种坑爹的感觉，这TM不是一样的吗！！！ 嘛，嘛。淡定，就当他是一样的好啦。这么说来只有 <strong>q</strong> 参数有实际用处了。</p>

<p>接下来再瞅瞅发音是怎么回事，老方法。wireshark抓包得到的结果是：</p>

<p><code>cpp
GET /dictvoice?audio=world&amp;type=2 HTTP/1.1
Accept: */*
If-Modified-Since: Sun,  05 Jan 2014 14:04:56 GMT
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MSAppHost/1.0)
GetContentFeatures.DLNA.ORG: 1
Pragma: getIfoFileURI.dlna.org
Accept-Language: zh-Hans-CN, zh-Hans;q=0.8, en-US;q=0.5, en;q=0.3
UA-CPU: AMD64
Accept-Encoding: gzip,  deflate
Host: dict.youdao.com
Connection: Keep-Alive
</code></p>

<p>蛮长的嘛。话说这个更简单了。只有两个参数audio和type。老衲闭着眼睛都能算出来audio参数是干嘛的："那就是！要发音的单词！"。"喂！我说，你太聪明了吧"。唉，一不小心人格分裂症又犯了, 最近期末考试，药停了两天没办法。另一个type参数经过实验发现是英音和美音。当type == 1时是英音，等于2时是美音，其他情况我没试，猜测是默认发音（英音或美音）。
然后再测试一下:</p>

<p>tomato的英发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=1">戳这里</a>。</p>

<p>tomato的美发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=2">戳这里</a>。</p>

<p>恩，不错。这次就对了嘛。</p>

<p>好吧，今天晚上刚考完智能卡的说。。。。这个项目这几天内估计不会有进展的，期待期末快结束吧。不知道下一篇什么时候写了。</p>
]]></content>
  </entry>
  
</feed>
