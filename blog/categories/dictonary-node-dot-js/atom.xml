<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dictonary_Node.js | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/blog/categories/dictonary-node-dot-js/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-03-31T14:27:32+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-版本v2.0]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/02/24/dictionary-node-dot-js-ban-ben-v2-dot-0/"/>
    <updated>2014-02-24T22:31:59+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/02/24/dictionary-node-dot-js-ban-ben-v2-dot-0</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>&lt;/ 开场白 &gt;</p>

<p>版本2.0新加入发音功能，该功能的实现都在pnc.js文件内，分成一下几个功能模块：</p>

<ol>
<li>下载mp3格式的音频文件</li>
<li>把文件存到临时文件里</li>
<li>调用系统工具播放音频文件</li>
</ol>


<!--more-->


<p>其中第一步下载文件和1.0版本的下载xml是完全一样的，不再赘述。</p>

<p>首要说明存储文件这个。</p>

<h2>保存临时文件</h2>

<p>因为要保存到临时文件（播放完成之后还要删除），所以差了一下Node.js的文档，找到下面的方法。</p>

<p>``` cpp
var fa = require(&lsquo;fs&rsquo;);</p>

<p>var count = 0;
while (true) {</p>

<pre><code>//avoid dead loop
if( count++ &gt; 10) return null;

var fileName = '/tmp/NodeDict.' + genRandomString(6) + '.mp3';
try {
    var fd = fs.openSync(fileName, 'wx');
    //console.log('S file: ' + fileName );
    return { fileName : fileName, fd : fd };
} catch (e) {
    //file alreadyExist
    //console.log(e);
}
</code></pre>

<p>}
```</p>

<p>其中<code>genRandomString(len)</code>返回长度为len的随机字符串。主要说明的是openSync方法，他是open方法的同步版，不过参数含义都是相同的。Node.js<a href="http://www.nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback">官方文档</a>这么解释open的
<blockquote><p>&hellip;</p></p><p><p>&lsquo;w&rsquo; &ndash; Open file for writing. The file is created (if it does not exist) or truncated (if it exists).<br/>&lsquo;wx&rsquo; &ndash; Like &lsquo;w&rsquo; but fails if path exists.<br/>&lsquo;w+&rsquo; &ndash; Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).<br/>&lsquo;wx+&rsquo; &ndash; Like &lsquo;w+&rsquo; but fails if path exists.</p></p><p><p>&hellip;</p></blockquote></p>

<p>也就是说当flags是'wx'时，如果文件已经存在会抛出异常（原文只说会fail，实验之后才确定是抛异常）。这样当检测到异常时在生成一个文件名看看能不能生成临时文件就行了。上诉代码就是这个思路。为了极端情况发生导致死循环，设置了循环的最大次数——10。</p>

<p>然后就是把缓存里的mp3文件写道文件中，这个更简单了：</p>

<p>``` cpp
function saveFile(data) {</p>

<pre><code>var file = makeTemp();
if (!file) err_exit();
fs.writeFileSync(file.fileName, data);
fs.closeSync(file.fd);
return file;
</code></pre>

<p>}
```
代码自解释，无需多言。</p>

<h2>调用系统命令播放mp3文件</h2>

<p>这里面用到了Node.js的child process技术。说来简单，还是先上代码:</p>

<p>```cpp
var spawn = require(&lsquo;child_process&rsquo;).spawn;
function playAndClean(file) {</p>

<pre><code>var play = spawn('play', [ file.fileName ]);
play.on('exit', function (code, signal) {
        //delete temp file
        fs.unlinkSync(file.fileName);
        });
</code></pre>

<p>}
<code>``
spawn函数的第一个参数是命令的名字，后面是一个数组存的是参数列表。假设这里的文件名是NodeDict.123456.mp3, 那么调用的系统命令就是</code>play NodeDict.123456.mp3`。这个play命令来自于sox软件包。然后给新进程添加退出时的事件，就是删除临时文件。</p>

<h2>然后就是在主文件dict.js 中调用pnc.js</h2>

<p>老规矩，先上代码:</p>

<p>```cpp
var cp = require(&lsquo;child_process&rsquo;);
try {</p>

<pre><code>var pncUrl = genPncURL(word, pnc);
cp.fork(pnc_js_Path, [ pncUrl ]);
</code></pre>

<p>} catch(e) {</p>

<pre><code>console.log('please set variable pnc_js_Path, which presents the absolute path of pnc.js');
</code></pre>

<p>}
```
这里使用了child process中的fork，于linux的fork不同，Node.js中的fork要指定运行的js脚本, 这里就指定了pnc.js脚本（要写绝对路径，因为要创建软链接，所以无奈只能手动制定了）。</p>

<p>这样就可以开两个进程了，一个下载解析xml显示单词解释，另一个进程下载发音文件在播放（其实播放又开了一个进程）。<br/>
恩，还不错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-版本v1.0]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0/"/>
    <updated>2014-02-19T18:31:45+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/02/19/dictionary-node-dot-js-ban-ben-v1-dot-0</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>&lt;/ 开场白 &gt;</p>

<p>这个小工具需要的功能有以下几个：</p>

<ul>
<li>解析命令行参数</li>
<li>发送http请求并取得返回的xml <!--more--></li>
<li>解析xml并得到单词的解释</li>
<li>输出结果</li>
</ul>


<p>最后还有一个，不过在v1.0中没有加入：</p>

<ul>
<li>发送http请求，获得单词发音，并播放出来</li>
</ul>


<p>下面一部分一部分的把各个功能实现说明一下：</p>

<h3>1.解析命令行参数</h3>

<p>这里的重点是获取命令行参数，在Node.js里面命令行参数可以从<code>process.argv</code>获取。
得到的是一个string数组，数组的第一项是node解释器的调用名，一般是<code>node</code>;第二项是js脚本的绝对路径，后面的各项就是传进去的命令行参数。于是得到下面的解析命令行参数的代码。</p>

<p>``` cpp</p>

<p>//command line arguments
var argv = process.argv.splice(2);</p>

<p>(function(){
 if (argv.length == 0 || argv.length > 2) {
 usage();
 process.exit(1);
 } else if( argv.length == 1) {
 word = argv<a href="https://github.com/LanderlYoung/Dictinoary_Node.js">0</a>;
 } else {
 var swt = argv<a href="https://github.com/LanderlYoung/Dictinoary_Node.js">0</a>;
 word = argv[1];
 if( swt.search(/e|E/) != -1) {
 ee = true;
 }
 if( swt.search(/p|P/) != -1) {
 pnc = true;
 }
 if( swt.search(/v/) != -1) {
 ee = cc = true;
 }
 if(swt.search(/V/) != -1) {
 pnc = true;
 ee = cc = true;
 }
 }
})();</p>

<p>```</p>

<h3>2.发送http请求并取得返回的xml</h3>

<p>说到这个话题，最先想到的是AJAX，不过在Node.js里面对http request 有另一种封装。</p>

<p>代码中的 http 来自于源代码最前面的 <code>var  http = require("http");</code></p>

<p>``` cpp
var req = http.request(queryURL,  function(res) {</p>

<pre><code>    var chunks = [], length = 0;
    res.on('data', function(trunk) {
        length += trunk.length;
        chunks.push(trunk);
        });
    res.on('end', function() {
        var data = new Buffer(length),
        pos = 0, 
        l = chunks.length;
        for (var i = 0; i &lt; l; i++) {
        chunks[i].copy(data, pos);
        pos += chunks[i].length;
        }

        res.body = data;
        //TODO
        //console.log(data.toString());
        var output = genOutput(data.toString());
        show(output);

        });
    res.on('error', function(err){
            //FIXME
            console.log("requesr error");
            });
</code></pre>

<p>});
req.end();</p>

<p>```
这里面主要做事的是三个回调函数，分别是当得到数据、数据下载结束、发生错误。代码所做的事是，把每次得到的数据缓存起来；当数据下载结束时把缓存的数据拼接起来。需要说明的是：在代码中用到了Node.js的Buffer类，其中on &lsquo;data&rsquo; 时的回调函数的参数就是Buffer类的实例。在一开始出现的问题是：设置了返回的xml的编码，然后就出现了乱码，猜测原因是每次on &lsquo;data&rsquo; 时传来的数据段把utf-8编码截断了。解决方法是先把返回数据当成二进制来处理，最后拼接起来再转成字符串。</p>

<h3>3.解析xml</h3>

<p>在浏览器下的javascript解析xml是原生支持的，不过在Node.js里面就要依赖于第三方的扩展库了。这里解析xml我选择了xmlreader库。安装方式相当简单<code>npm install xmlreader</code>就能把xmlreader安装到当前目录下。使用该xml库解析xml也是相当简单的。还是先上代码吧。</p>

<p>``` cpp
function genOutput(xml) {</p>

<pre><code>var res = [];
xmlreader.read(xml, function (err, response) {
        if (err) return console.log(err);

        var basic = response.yodaodict.basic;

        if(!basic) return;

        for (var i = 0; i &lt; basic.count(); i++) {
        var expand = false;
        //english chinese --default
        var type = basic.at(i).type.text().toLowerCase();
        if ( (type === 'ec' &amp;&amp; cc) ||
            (type === 'ee' &amp;&amp; ee) ||
            (type === 'ce' &amp;&amp; cc) ) {
        res.push({
</code></pre>

<p>type : basic.at(i).name.text(),
word : []
});</p>

<pre><code>        expand = true;
        }
</code></pre>

<p>if (expand) {</p>

<pre><code>//console.log(res[res.length - 1].type);
var xword = basic.at(i)['authoritative-dict'].word;

if (!xword) continue;

var word = res[res.length - 1].word;
for( var word_c = 0; word_c &lt; xword.count(); word_c++) {
    word.push( { type : '', trs : []});

    var xtrs = xword.at(word_c).trs;

    if (!xtrs) continue;

    var trs = word[word.length -1].trs;
    trs.push({type : '', exp : []});
    var exp = trs[trs.length - 1].exp;
    for(var trs_c = 0; trs_c &lt; xtrs.count(); trs_c++) {
        if( xtrs.at(trs_c).pos ) {
            trs[trs.length -1].type = xtrs.at(trs_c).pos.text();
        }
        var xtr = xtrs.at(trs_c).tr;

        if (!xtr) continue;

        for( var tr_c = 0; tr_c &lt; xtr.count(); tr_c++) {
            try {
                exp.push(xtr.at(tr_c).l.i.text());
            } catch (e) {
            }
        }
    }
}
</code></pre>

<p>} else {</p>

<pre><code>//console.log(basic.at(i).name.text());
</code></pre>

<p>}
}</p>

<p>});
return res;
}
<code>``
这里面回调函数的参数就是遍历xml的关键，其相当与整个xml的父节点。在xmlreader库中，获取字节点只需要使用</code>.`即可取得，比如html有个字节点body可以使用html.body来取得body节点。对于每个节点有几个方法，text()是获取该节点内的文本内容。如果某一父节点有多个相同标签的字节点，那么就要用count和at来取得每一个字节点。还有一个attributes（）方法来获取标签内的属性。</p>

<h3>4.输出结果</h3>

<p>没什么好解释的，使用<code>console.log</code>输出。值得说明的只是bash的文本显示格式，bash可以控制文字的颜色，和样式（包括：正常，下划线，加粗等）。使用方法如下：</p>

<p>``` cpp
RED = &ldquo;\033[1;31m&rdquo;;
GREEN = &ldquo;\033[1;32m&rdquo;;
DEFAULT = &ldquo;\033[0;49m&rdquo;;</p>

<p>BOLD = &ldquo;\033[1m&rdquo;;
UNDERLINE = &ldquo;\033[4m&rdquo;;
NORMAL = &ldquo;\033[m&rdquo;;
p(&lsquo;  &rsquo; + GREEN + BOLD + trs[trs_c].type + NORMAL);
```</p>

<hr />

<h3>即将添加到V2.0中的新功能</h3>

<ul>
<li>可以实现异步发音</li>
</ul>


<p>即发音和词典显示分两个进程进行，不会因为发音文件硕大影响单词显示速度，进而产生阻塞感。</p>

<p>预计实现方式，是使用Node.js的http request下载下来发音的mp3文件，放到临时文件中，使用ffplay或其他工具播放，然后删除掉mp3文件。</p>

<p>如果可能的话不是用ffplay，而是使用ffmpeg库开发一个mp3播放小程序，增强可移植行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dictionary_Node.js-项目启航]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang/"/>
    <updated>2014-01-05T22:32:13+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/05/dictionary-node-dot-js-xiang-mu-qi-hang</id>
    <content type="html"><![CDATA[<p>&lt; 开场白 &gt;</p>

<p><a href="https://github.com/LanderlYoung/Dictinoary_Node.js"><strong>基于Node.js的命令行词典应用</strong></a></p>

<p>项目刚开始做，今天先做个铺垫吧。</p>

<p>&lt;/ 开场白 &gt;</p>

<p>一直以来都很想学习一下web技术，HTML5, CSS3, Javascript，前段时间算是终于闲下来了（其实是好多课没有意思，不想去上了），于是学习了一下，同时还写了一个Chrome 应用  <a href="https://github.com/LanderlYoung/Magnet2Torrent">Magent2Torrent</a>。了解javascript之后发现她真是一个灵活可爱的语言，也可能是我接触的第一个动态语言（或者叫弱类型语言），总觉得她有着无限的魅力。同时还喜欢上了JSON！</p>

<p>前一段时间（在这个github博客搭建之前）玩了一下<a href="http://www.nodejs.org">Node.js</a>，发现这真是个好东西，我可以在本地执行javascript脚本了, 尽管Node.js的设计初衷并非如此……（我这是玩得有点偏了）虽然和python等本地执行的脚本语言在API上还有差距，鉴于Node.js可以使用C++模块（add on），也算是功能完备了。</p>

<!--more-->


<p>之前用过一个python写的脚本，可以请求有道网页版的词典，然后解析得到的html内容，行命令行输出单词解释，于是我冒出了用javascript+Node.js实现上述功能的想法。
与之前的python脚本不同的是，我打算使用有到的API来查询单词。</p>

<p>鉴于有到词典的查询API需要申请，且免费用户查询次数有限，我决定使用wireshark抓包来得到官方
API。抓包的应用是win8上的有道词典。得到的数据如下：</p>

<p>``` cpp
GET /search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=store HTTP/1.1</p>

<p>Host: dict.youdao.com</p>

<p>&hellip; &hellip;
```</p>

<p>可以从中看到各个参数，其中参数q就是我们要查询的单词，此处是node。其他参数事实上并不需要考虑太多，不过秉承着geek精神还是看一下为好。</p>

<hr />

<ul>
<li>keyfrom明显意思是数据来源，此处是metrodict.main和win8客户段吻合。</li>
<li>xmlDetail看来是个bool类型，此处为true，可以猜测如果为false可能返回解释会比较简单。</li>
<li>doctype肯定是文档类型，此处是xml。</li>
<li>xmlVersion，xml文档的版本。</li>
<li>dog.Version, 又是某个东西的版本。</li>
<li><strong>q</strong>就是要查询的单词了。</li>
<li>le看来是语言的意思，le = language，值是eng表示英语english。</li>
<li>kerfrom和前文一样。client是客户端，这里是metrodict就是win8的词典啦。</li>
<li>id，卧槽！这么长，估计申请到的id就是这样，这个id肯定是有道官方使用的id（绝对没有查询次数限制，哦吼吼！）</li>
<li>appVersion指定客户端应用版本。</li>
<li>vender不清楚什么意思，不管他啦。</li>
</ul>


<hr />

<p>总结下来两个有用的参数xmlDetail和q。打开chrome验证一下看看是不是。</p>

<p> 1.xmlDetail=true版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=true&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p> 2.xmlDetail=false版的hello查询。<a href="http://dict.youdao.com/search?keyfrom=metrodict.main&amp;xmlDetail=false&amp;doctype=xml&amp;xmlVersion=8.1&amp;dogVersion=1.0&amp;q=node&amp;le=eng&amp;keyfrom=metrodict.input&amp;client=metrodict&amp;id=3019615280104595010663601040404140109040186114402823410158212201782429070109&amp;appVer=1.1.49.6663.beta&amp;vendor=stor">戳这里</a></p>

<p>额。。。有种坑爹的感觉，这TM不是一样的吗！！！ 嘛，嘛。淡定，就当他是一样的好啦。这么说来只有 <strong>q</strong> 参数有实际用处了。</p>

<p>接下来再瞅瞅发音是怎么回事，老方法。wireshark抓包得到的结果是：</p>

<p><code>cpp
GET /dictvoice?audio=world&amp;type=2 HTTP/1.1
Accept: */*
If-Modified-Since: Sun,  05 Jan 2014 14:04:56 GMT
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MSAppHost/1.0)
GetContentFeatures.DLNA.ORG: 1
Pragma: getIfoFileURI.dlna.org
Accept-Language: zh-Hans-CN, zh-Hans;q=0.8, en-US;q=0.5, en;q=0.3
UA-CPU: AMD64
Accept-Encoding: gzip,  deflate
Host: dict.youdao.com
Connection: Keep-Alive
</code></p>

<p>蛮长的嘛。话说这个更简单了。只有两个参数audio和type。老衲闭着眼睛都能算出来audio参数是干嘛的："那就是！要发音的单词！"。"喂！我说，你太聪明了吧"。唉，一不小心人格分裂症又犯了, 最近期末考试，药停了两天没办法。另一个type参数经过实验发现是英音和美音。当type == 1时是英音，等于2时是美音，其他情况我没试，猜测是默认发音（英音或美音）。
然后再测试一下:</p>

<p>tomato的英发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=1">戳这里</a>。</p>

<p>tomato的美发音, <a href="http://dict.youdao.com/dictvoice?audio=tomato&amp;type=2">戳这里</a>。</p>

<p>恩，不错。这次就对了嘛。</p>

<p>好吧，今天晚上刚考完智能卡的说。。。。这个项目这几天内估计不会有进展的，期待期末快结束吧。不知道下一篇什么时候写了。</p>
]]></content>
  </entry>
  
</feed>
