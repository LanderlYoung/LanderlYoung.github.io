<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: java | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/tags/java/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2015-04-05T15:47:46+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java序列化实践]]></title>
    <link href="http://LanderlYoung.github.io/blog/2015/04/04/javaxu-lie-hua-shi-jian/"/>
    <updated>2015-04-04T18:06:20+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2015/04/04/javaxu-lie-hua-shi-jian</id>
    <content type="html"><![CDATA[<p>java中实例的序列化是指将一个实例转成 二进制流以用于网络传输或者固化存储之用。事实上，简单点说就是把一个类实例的成员变量存储下来，然而这个过程根据成员变量的类型的不同，可能会很简单，也可能会很复杂。序列化的用处还是很大的，比如跨进程通信（IPC，安卓中的IPC用到了序列化，只是安卓自身实现了一个比java更轻量级、更简单的序列化方式。但是原理大同小异），远程方法调用（RMI，事实上这个和安卓中的Binder通讯很类似）;此外还常见的是把实例序列化到数据库中以blob的形式存储。并且因为java语言本身就是跨平台设计的，序列化之后的数据也是平台无关的，因此你无需关心大小端之类的问题（以及类似于C语言的内存对齐问题）！既然序列化这么有用还是有必要学习一下的。（BTW，java EE中提供了更加严格的固化方案Java Date Object，或着也可以考虑使用Hibernate框架。）</p>

<p>参考的资料是《Thinking in java》，和<a href="http://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html">IBM的一篇博文</a>。下面来做几个实验，一边学习一边实践一下。</p>

<!--more-->


<p>序列化其实是很简单的，你只需要给想序列化的类实现Serializable接口（这个接口只是标签接口，没有方法）。你的类就被标记为了可序列化。然后序列化的过程是使用ObjectOutputSteram::writeObject()方法;反序列化是使用ObjectInputStream::readObject()方法。</p>

<h3>1. <code>Serializable</code>方式</h3>

<p>这种方式可以说是由jvm来全权掌控的。序列化的时候，java会把类的每一个实例成员变量（不包括static成员变量）写下来，比较好理解的是原始类型。如果类中有成员是其他Object，就会递归的去序列化这个Object。</p>

<p>比如如下代码：</p>

<pre><code class="java">package com.young;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

class A implements Serializable {
    private static int instances = 0;

    public A next;
    private int num;

    public A(int num, A next) {
        this.num = num;
        System.out.println("Constructor #" + (instances++));
        this.next = next;
    }

    @Override
    public String toString() {
        return Integer.toString(num) + " " + next;
    }
}

public class Main {

    public static void main(String[] args) throws IOException, ClassNotFoundException {
        A a = new A(7, new A(8, null));

        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));
        oo.writeObject(a);
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));
        A a1 = (A) oi.readObject();
        oi.close();
        System.out.println("a:" + a);
        System.out.println("a1:" + a1);
    }
}
</code></pre>

<p>输出如下：</p>

<pre><code class="bash">Constructor #0
Constructor #1
serialize
deserialize
a:7 8 null
a1:7 8 null
</code></pre>

<p>然而在反序列化的过程中，<strong>构造函数并没有被调用</strong>！所以Serializable方式的反序列化是直接从数据中“填充”一个实例出来！看上去有点神奇的样子。</p>

<h4>1.1 <code>transient</code>关键字</h4>

<p>在Serializable方式中如果有些成员变量（比如密码等敏感信息）不想被序列化的话，你可以使用transient关键字来修饰之。</p>

<h4>1.2 static fields</h4>

<p>序列化时static变量不会被序列化进去。因为它是class的信息，和实例没什么关系。如果要序列化的话可以自己用方式2或3手动write。</p>

<h3>2. <code>Enternalizable</code>方式</h3>

<p>了解Serializable方式的序列化会发现：在整个序列化过程中我们好像什么都没做，只是实现了Serializable接口而已，对于这种打酱油的行为我表示不安心！感觉局面不在自己的掌控之中呀！好在java中还有另一种序列化方式<code>Externalizable</code>方式。这个接口中有两个方法：<code>void writeExternal(ObjectOutput out)</code>和<code>void readExternal(ObjectInput in)</code>。（这种方式和Android中的Parcelable序列化方式思路是完全一样的。）直接看例子：</p>

<pre><code class="java">package com.young;

import java.io.Externalizable;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;

class B implements Externalizable {
    private static int instances = 0;

    private int n;

    public B() {
        System.out.println("Constructor1 #" + (instances++));
    }

    public B(int n) {
        System.out.println("Constructor2 #" + (instances++));
        this.n = n;
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(n ^ 100); //加密存储
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        n = in.readInt() ^ 100; //读取解密
    }

    @Override
    public String toString() {
        return "b:" + n;
    }
}

public class Main {


    public static void main(String[] args) throws IOException, ClassNotFoundException {
        B b1 = new B(7);
        B b2 = new B(9);
        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));
        oo.writeObject(b1);
        oo.writeObject(b2);
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));

        B b = (B) oi.readObject();
        System.out.println(b);
        b = (B) oi.readObject();
        System.out.println(b);
        oi.close();
    }
}
</code></pre>

<p>输出如下：</p>

<pre><code class="bash">Constructor2 #0
Constructor2 #1
serialize
deserialize
Constructor1 #2
b:7
Constructor1 #3
b:9
</code></pre>

<p>从中可以看出：我们需要在writeExternal中对该类需要序列化的数据进行操作，在readExternal中相应的进行读取，需要注意的是：读和写的顺序要一致。在这种方式下java自身是不会干涉实例的序列化的，所有的序列化、反序列化工作都是由开发者自己定义的。这种方式下开发人员有了足够的自由度！比如我可以writeExternal中对数据加密，在readExternal中对数据解密，以此保证序列化的数据是安全的。（上面的代码中使用亦或进行的简单的加解密操作）。</p>

<p>和Serializable不同的是我们看到在反序列化的时候<strong>默认构造函数被调用了</strong>！所以这种方式是比较纯粹的实现接口+接口回调，而不是Serializable中实例直接被java填充出来的黑魔法那样！</p>

<p>因为要调用默认构造函数，因此实现Externalizable接口的类必须有一个public的默认构造函数！这样jvm才能初始化一个类，然后调用其接口实现来进行反序列化。</p>

<h3>3. 第三种序列化方式</h3>

<p>这种序列化方式更像是前两种的综合体，TIJ中称这种方法为“An alternative to Externalizable”。（并且这种方式并不是很符合通常的java语言习惯，因此看起来很奇怪。在Thinking in java一书中被作者Bruce Eckel喷得不轻！不过我们还是看一下什么情况。）</p>

<p>实现方式是实现Serializable接口，然后在你的类中加入如下两个方法，而且方法签名要一模一样！：</p>

<pre><code class="java">private void writeObject(ObjectOutputStream stream)
throws IOException;

private void readObject(ObjectInputStream stream)
throws IOException, ClassNotFoundException;
</code></pre>

<p>没错，你没有看错他们的确是private方法！看仔细咯，这个方法和Externalizable中的两个方法的参数是不一样的，这里面是ObjectOutputStream，而后者是ObjectOutput。</p>

<p>然后在两个方法中你可以手动控制序列化，这一点和方式2相同。不同的是他还和方式1结合了！不过到底怎么结合的呢？关键在于<code>ObjectOutputStream：：defaultWriteObject()</code>方法和<code>ObjectOutputStream：：defaultReadObject()</code>。你可以在writeObject最开始调用相应的defaultWriteObject方法。他的作用就是使用默认的序列化实现方式来操作当前实例，在这之后你可以自由进行其他的操作序列化过程。对于read亦是如此。</p>

<p>是不是显得很奇怪，我调用了ObjectInputStream的方法，而且都没有把this传进去，可是jvm却把“我”给序列化了！对于这真的只能说不要在意细节，java语言就是这么设计的，不喜欢可以不用这种方式嘛～（反正我最喜欢方式2</p>

<p><blockquote><p>If you are going to use the default mechanism to write the non-transient parts of your object, you must call defaultWriteObject( ) as the first operation in writeObject( ), and defaultReadObject( ) as the first operation in readObject( ). These are strange method calls. It would appear, for example, that you are calling defaultWriteObject( ) for an ObjectOutputStream and passing it no arguments, and yet it somehow turns around and knows the reference to your object and how to write all the non-transient parts. Spooky.</p><footer><strong>&lsquo;Bruce Eckel&rsquo; &lsquo;Thinking in java&rsquo;</strong></footer></blockquote></p>

<p>好!现在&#8221;show me the code&#8221;:</p>

<pre><code class="java">class T implements Serializable {
    public static int instances = 0;
    private int num;
    private transient String passwd;

    public T(int n) {
        num = n;
        passwd = n + "0";
        System.out.println("Constructor #" + (instances++));
    }

    private void writeObject(ObjectOutputStream stream)
            throws IOException {
        stream.defaultWriteObject();
        stream.writeObject("NO PASSWORD");
        System.out.println("writeObject");

    }

    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        passwd = (String) stream.readObject();
        System.out.println("readObject");
    }

    @Override
    public String toString() {
        return num + " " + passwd;
    }
}

public class Main {

    public static void main(String[] args) throws IOException, ClassNotFoundException {

        T t = new T(10);
        T t1 = new T(11);
        //
        System.out.println("serialize");
        ObjectOutputStream oo = new ObjectOutputStream(
                new FileOutputStream("oo.out"));

        oo.writeObject(t);
        oo.writeObject(t1);

        //
        oo.close();
        System.out.println("deserialize");
        ObjectInputStream oi = new ObjectInputStream(
                new FileInputStream("oo.out"));
        T tmp;
        tmp = (T) oi.readObject();
        System.out.println(tmp);
        tmp = (T) oi.readObject();
        System.out.println(tmp);

        //
        oi.close();
    }
}
</code></pre>

<p>输出
<code>bash
Constructor #0
Constructor #1
serialize
writeObject
writeObject
deserialize
readObject
10 NO PASSWORD
readObject
11 NO PASSWORD
</code></p>

<p>可以看出这种<strong>方式3仍然不会调用构造函数</strong>！</p>

<h3>4. serialVersionUID 常量</h3>

<p>不管是上述的那一种序列化方式，都可以使用<code>serialVersionUID</code>控制class的版本问题。<code>serialVersionUID</code>是一个定义在类内部的成员常量比如：<code>private static final int serialVersionUID = 1L;</code>。他的作用是标记class的版本（这是我个人的理解，下面解释一下）。一个类如果定义了这个常量(就算你没有显式定义，javac也会帮你生成一个)，在序列化时会存储下来这个常量。当反序列化时jvm会先比较加载的class和序列化数据中的类的serialVersionUID是否相同，如果不同的话就认为class版本不一样，抛出<code>java.io.InvalidClassException</code>异常，拒绝反序列化。直白一点说就是“当一个类序列化时候的serialVersionUID和反序列化时候的serialVersionUID相同时，其反序列化才会成功。</p>

<p>当你的某个用于固化的class被更新的时候，他的成员和原来相比已经不再完全相同了，此时之前被序列化的数据——为了避免逻辑混乱——已经不能再反序列化到新的class中了。此时你可以更改新的class的serialVersionUID来达到这一目的。</p>

<hr />

<blockquote><p>  事实上因为Externalizable方式的序列化、反序列化全部是由程序员一手掌握的，因此它显得范围额比较简单，所有逻辑（哪些要序列化，如何序列化）都可以在接口的两个方法中控制。然而Serializable方式由于是由jvm全权负责的，要控制一些逻辑反而会显得不那么简单明了。</p></blockquote>

<h3>5. 一些特殊情况</h3>

<ol>
<li>相同的instance问题：比如一个List中包含了同一个实例的多处引用。那么序列化时<strong>同一个引用只会序列化一次</strong>。反序列化时这些相同的引用最终还是得到的引用仍然是相同的——同一个实例。所以循环引用也不会发生死循环的情况！（不得不说这一点很是机智！）</li>
<li>基于1,<strong>当序列化时写入同一个实例（引用相同）时，第二次写入并不会触发其序列化</strong>，因此只是第一次写入时进行了序列化，即使后来写入的时候实例的状态已经发生了改变（jvm也会忽略）。所以这一点会需要特别注意。</li>
<li><p>父类没有实现序列化接口而子类实现的时候（Drived extends Base)：</p>

<p> 这里序列化接口有两种（Serializable、Externalizable）分两种情况叙述：</p>

<ul>
<li>Serializable：此时Base因为没有实现Serializable而不能序列化，但是Drived因为实现了接口所以可以序列化。我们知道实现Serializable接口的类不需要调用构造函数就能反序列化。我们还知道类的初始化顺序是首先要初始化父类的。这里反序列化时就会出现要初始化父类的情况，因此需要父类有public默认构造函数。同时如果是方式3的话自然也可以手动序列化父类中的数据。</li>
<li>Externalizable：这个最好说：子类要有public默认构造函数;父类就无所谓了，反正子类的默认构造函数会调用父类的构造函数。至于哪些会序列化，哪些不会，就自己掌控了。</li>
</ul>
</li>
</ol>


<h3>总结</h3>

<ol>
<li><code>Serializable</code>方式(方式1、3)反序列化时不会调用构造函数。</li>
<li><code>Externalizable</code>方式反序列化会调用默认（无参）构造函数，如果没有public默认构造函数会抛异常。</li>
<li><code>static</code> 变量默认不会序列化。</li>
<li><code>transient</code> 关键字修饰的变量默认也不会序列化。</li>
<li><code>serialVersionUID</code>控制class版本信息，防止出现不正常序列化</li>
<li>相同引用的实例序列化时只会序列化一次。反序列化后引用也是相同的。</li>
<li>父类没有序列化而子类序列化的情况。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java(Android)中线程池的使用]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong/"/>
    <updated>2014-09-23T17:39:40+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong</id>
    <content type="html"><![CDATA[<p>java SE5提供了<code>java.util.concurrent.Executors</code>类来实现线程池的功能。
<em>Thinking in Java</em> 中这么解释Executors：</p>

<blockquote><p><code>Executors</code>允许你执行异步的任务（task）而不用显式的去管理线程的生命周期。</p></blockquote>

<p>可以说Executors是线程们的管理者，让线程们的生存方式从<strong>放养</strong>变成了<strong>圈养</strong>。Executors来处理一次能同时运行多少个线程，哪个线程在哪个线程的后面执行。总的来说Executors之于线程就像操作系统止于进程一样——管理者与被管理者的关系。</p>

<!--more-->


<p><strong>new Thread的弊端如下：</strong></p>

<ol>
<li><p>每次new Thread新建对象性能差。</p></li>
<li><p>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</p></li>
<li><p>缺乏更多功能，如定时执行、定期执行、线程中断。</p></li>
</ol>


<p><strong>相比new Thread，Java提供的四种线程池的好处在于：</strong></p>

<ol>
<li><p>重用存在的线程，减少对象创建、消亡的开销，性能佳。</p></li>
<li><p>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</p></li>
<li><p>提供定时执行、定期执行、单线程、并发数控制等功能。</p></li>
</ol>


<p>（上述比较摘自：<a href="http://www.trinea.cn/android/java-android-thread-pool/">http://www.trinea.cn/android/java-android-thread-pool/</a> ）</p>

<p>Executors的使用静态方法来创建相应的<code>ExecutorService</code>接口实现，如下：</p>

<ul>
<li><code>Executors.newCachedThreadPool()</code></li>
<li><code>Executors.newFixedThreadPool()</code></li>
<li><code>Executors.newScheduledThreadPool()</code></li>
<li><code>Executors.newSingleThreadExecutor()</code></li>
</ul>


<p> 这些线程池分别具有不同的能力：
 （Java Concurrency in Pratice——java编程实践，如下解释）</p>

<ul>
<li><p>newFixedThreadPool：创建一个定长的线程池，每提交一个任务就创建一个线程，直到达到池的最大长度，这时线程池会保持长度不再变化（如果一个线程由于未预期的Exception而结束，线程池会补充一个新线程）。</p></li>
<li><p>newCachedThreadPool：创建一个可缓存的线程池，如果当前线程池的长度超过了处理的需要时，它可以灵活的回收空闲的线程，当需要增加时，它可以灵活的添加新的线程，而不会对池的长度作任何限制。</p></li>
<li><p>newSingleThreadExecutor：创建一个单线程化的executor，它只创建唯一的worker线程来执行任务，如果这个线程异常结束，会有另一个取代它。executor会保证任务依照任务队列规定的顺序（FIFO，LIFO，优先级）执行。</p></li>
<li><p>newScheduledThreadPool：创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer。</p></li>
</ul>


<h3>ExecutorService的使用</h3>

<p><code>ExecutorService</code>接口继承自Executor的接口定义，他提供了一个线程池应该实现的方法定义，包括运行/提交新任务的方法，结束任务的方法，等等。
<code>ExecutorService</code>的接口有：</p>

<p><strong>提交任务</strong>：</p>

<ul>
<li><p><code>execute</code>（该方法继承自Executor）提交一个runnable接口封装的task，没有返回值</p></li>
<li><p><code>submit</code> 提交一个Callable或者Runnable接口封装的任务，返回一个Feature。</p></li>
<li><p><code>invokeAll</code>传入一个task的容器，执行其包含的所有task。</p></li>
<li><p><code>invokeAny</code>传入一个task的容器，只要其中一个task异常终止，就结束其他task（如果还没执行就不再执行）。</p></li>
</ul>


<p><strong>终止线程池</strong>：</p>

<ul>
<li><p><code>shotdown</code>线程池停止接受新的task，所有已有task执行完后线程池随即关闭</p></li>
<li><p><code>shutdownNow</code>立即终止线程池内的所有task，关闭线程池</p></li>
</ul>


<p><strong>重要的一点</strong>：因为只要有一个非Daemon线程运行着，就会阻止JVM的正常退出。所以线程池一定要记得shutdown！</p>

<p>所以向ExecutorService提交的任务可以是通过<code>Runnable</code>或者<code>Callable</code>接口封装的，其中Callable接口带有一个类型参数，表示返回值的类型。Runable可以使用execute方法，提交。但是Runnable和Callable都可以使用submit方法提交。execute方法没有返回值，submit方法会返回一个Future<T>类型，可以查看任务的执行状态以及获取任务的返回）。所以当你想要一个任务完成时返回一个返回值，submit将是你的不二之选（不要三四千，不要一两千，只要998，submit抱回家）。</p>

<p><strong>关于Future<T></strong></p>

<p>Future功能强大，提供了对任务的各种操作：</p>

<ul>
<li><p><code>isDone()</code> 返回任务是否已经执行完成</p></li>
<li><p><code>get()</code>返回任务的返回值，如果调用get的时候任务还没有完成，则会阻塞知道任务完成</p></li>
<li><p><code>get(long timeout, TimeUnit unit)</code>同上，但是多了个参数，表示阻塞的最大时长。如果在设定的最大阻塞时长内没有指定任务没有顺利结束并返回结果，该方法会抛出一个<code>java.util.concurrent.TimeoutException</code>。</p></li>
<li><p><code>cancel(boolean mayInterruptIfRunning)</code> 尝试去取消一个任务的执行，如果一个任务已经结束，或者已经被取消，或者因为一些什么原因不能够取消，则会取消失败，同时返回false。如果一个任务还没有开始执行就被取消了，那么它将不再执行。如果这个方法被调用的时候，任务正在执行，则将由参数<code>mayInterruptIfRunning</code>决定是否终止正在运行的task。</p></li>
<li><p><code>isCancelled()</code> 返回任务是否已经被取消</p></li>
</ul>


<p>了解过强大的Future是否觉得execute可以去死了，连个Future都返回不了，事实上并非如此，因为submit最终调用的还是execute-_-其实现方法是给execute传入一个RunnableFuture接口的实例（在标准库里有一个很好的实现叫FutureTask），RunnableFuteure接口定义了一个觉有Future功能的Runnalbe。想自定义Future就可以通过这种方式。</p>

<p>submit也是可以传入Runnable的，当传入Runnable时会怎样呢：</p>

<ul>
<li><p>当使用 <code>submit(Runnable)</code>时，返回一个<code>Future&lt;?&gt;</code>，它的get方法会返回null，除此之外其他方法调用表现正常。</p></li>
<li><p>当使用<code>submit(Runnable task, T result)</code>时，返回一个Future<T>，它的get方法会返回result。就好比task是一个会返回result的Callable。</p></li>
</ul>


<p>另外一个小tip就是Executors提供了Runnable转Callabe的静态方法：</p>

<ul>
<li><p><code>public static &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result)</code>将Runnable转换成能返回result的Callable接口</p></li>
<li><p><code>public static Callable&lt;Object&gt; callable(Runnable task)</code>将Runnable转换成返回null的Callable接口</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
