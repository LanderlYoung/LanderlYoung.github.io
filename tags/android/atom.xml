<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Android | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/tags/android/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-06-23T15:04:12+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SNG迷你项目感悟]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/06/20/sngmi-ni-xiang-mu-gan-wu/"/>
    <updated>2014-06-20T16:38:32+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/06/20/sngmi-ni-xiang-mu-gan-wu</id>
    <content type="html"><![CDATA[<p>来腾讯实习有半个月来，刚进来公司统一培训了一天半，闲扯了点东西。然后SNG部门培训了3天时间，讲解一些业务流程。然后就是重头戏，所谓的迷你项目。我擦，虽然今天做完了，但是我还是想说这个巨坑啊！</p>

<p>==========标准割===========</p>

<!--more-->


<p>做这个迷你项目首先要说的是，还真的有点累的。。。每天早上做班车从酒店到公司，然后晚上一边九点走，到最后两天就更夸张了。前天在公司通宵了一夜，昨天夜里也是十二点多才走，欣慰的是腾大东侧的路上出租车排排停，估计我鹅长的员工加班都很积极吧。一个安卓应用，7天时间，两个人做，看这数据都觉得恐怖。</p>

<p>不过最后还是搞定了，尽管没拿奖，但是自己仍然很有成就感。做项目期间还是受到导师同时们的很大帮助的。尤其是qiuhangtan的导师wii，帮了我们解决很多问题。最后一晚要不是wii帮qiuhang调了一个多小时的bug估计昨天就得继续通宵了，而且说不定通宵了也搞不，那就苦逼了。</p>

<p>因为我做和服务器端的接口工作，当时一边商量一边改。一开始觉得商量接口真麻烦，后来才发现没有事先定义好接口才是做苦逼的。最荒唐的一件事是今天上午mini项目要测评了，结果昨天下午还在找后台的同学加接口。所以说：
<blockquote><p></p></p><p><h2>概要设计真的很重要</h2></p><p><br/><p></p></blockquote></p>

<p>前天晚上的问题是在电脑上调试完毕的net接口整合到Android上却得不到返回数据，比较奇怪的是有一个房屋信息POST请求能上传，而且数据库里会出现相应信息，但是返回值却是空的。一开始怀疑是没有申请网络访问权限，后来发现不是。后来sponsor Lewis 过来帮我调试，教会了我一套安卓单步调试的方法，但是问题还是没能轻松解决。当天晚上熬了一夜，睡醒了4点，突然灵机医现决定把所有的JSON返回值都Log出来，同时所有的Exeption也要Log出来。后来慢慢调试才发现是NetworkOnMainThreadException！网络跑在主UI线程！所以每次执行到connect的时候android系统都会抛出这个异常，但是我却Too young， sometimes too naive！把所有可能抛出异常的地方都catch (Exception e) {}。就是说catch了所有Exception的父类并且什么也不做！对！就是不作为！后来跟我的导师raez说这件事，他说：
<blockquote><p></p></p><p><h2>异常本来是用来发现问题的，不能随便catch。</h2></p><p><br/><p></p></blockquote></p>

<p>对此我的理解是，需要catch一个exception的时候<em>尽量精准catch</em>。比如一个方法可能抛出IOException就不要懒懒的去直接catch Exception，同时如果抛出多种异常也要一个一个catch;
``` java</p>

<p>try {</p>

<pre><code>...
} catch (IOException e) {
        e.printStackTrace();
        ...
} catch (FileNotFoundException ex) {
        e.printStackTrace();
        ...
}
</code></pre>

<p>```
同时<em>捕获一个异常之后不能什么都不做</em>，至少应该printStackTrace或者是Log出来，否则出现问题之后很难排查出来。另外NullPointerException 原则上不允许catch，OutOfMemoryError除了在大量消耗内存的代码片段上（比图图片处理，或者字符串拼接等）不允许catch。还有就是捕获异常是一定<em>精准捕获</em>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stepByStepAndroid-第一课]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/05/13/stepbystepandroid-di-%5B%3F%5D-ke/"/>
    <updated>2014-05-13T12:04:19+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/05/13/stepbystepandroid-di-[?]-ke</id>
    <content type="html"><![CDATA[<p>&lt;资源></p>

<ul>
<li>git项目<a href="https://github.com/LanderlYoung/stepByStepAndroid">github</a></li>
<li>详见<a href="https://github.com/LanderlYoung/stepByStepAndroid/releases">release note</a></li>
<li><a href="https://github.com/LanderlYoung/stepByStepAndroid/wiki">项目wiki</a></li>
</ul>


<p>&lt;/资源></p>

<p>梳理一下第一课学到的内容:</p>

<ol>
<li>创建简单的用户界面

<ul>
<li>简单的布局控制</li>
</ul>
</li>
<li>启动另一个Activity

<ul>
<li>给button添加回调函数</li>
<li>使用Intent</li>
</ul>
</li>
</ol>


<!--more-->


<h3>创建用户界面</h3>

<p>修改原来的fragment_main.xml文件，使用LinearLayout：
``` xml
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" &gt;
</code></pre>

<p></LinearLayout>
<code>
上面的android:orientation属性把LinearLayout设置成水平线性布局，所有元素水平排列。
然后在LinearLayout中添加控件EditText和Button
</code> xml</p>

<pre><code>&lt;EditText 
    android:id="@+id/edit_message"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="@string/edit_message" /&gt;
</code></pre>

<p>  &lt;Button</p>

<pre><code>    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/button_send" /&gt;
</code></pre>

<p>```
然后在相应的strings.xml中添加string值。
效果如图：</p>

<p><img src="https://cloud.githubusercontent.com/assets/5700847/2953445/c8028f00-da59-11e3-9800-89a5c859064b.png" width="360" alt="device-2014-05-12-231827" /></p>

<p>接着控制一下布局：让EditText占据LinearLayout横向的剩余空间。只需要调整两个方面<code>android:layout_weight="1"</code>和<code>android:layout_width="0dp"</code>，其中layout_weight=1可以让它占据剩下的空间，layout_width=0改善性能。
看一下效果：</p>

<p><img src="https://cloud.githubusercontent.com/assets/5700847/2953442/b9d4597c-da59-11e3-886d-08d3f8e667a9.png" width="360" alt="device-2014-05-12-235041" /></p>

<h2>为button添加click事件处理</h2>

<p>在Button中添加一行<code>android:onClick="sendMessage"</code>这样就指定了button的click事件由<code>public void onClick(View view)</code>这样方法签名的方法来处理。
所以对应的去MainActicity.java中添加该函数：
``` java
//call back of the button
public void sendMessage(View view) {</p>

<pre><code>Intent intent = new Intent(getApplication(),DisplayMessageActivity.class);
EditText editText = (EditText)findViewById(R.id.edit_message);
String message = editText.getText().toString();
intent.putExtra(EXTRA_MESSAGE,message);
startActivity(intent);
</code></pre>

<p>}
```
上面的DisplayMessageActivity类是使用向导创建的新Activity。</p>

<h3>创建新Activity</h3>

<p>使用向导创建新的Activity，然后需要在AndroidManifest.xml里注册Activity</p>

<p>``` xml
   &lt;application</p>

<pre><code>   ......
    &lt;activity
        android:name="com.young.stepbystepandroid.DisplayMessageActivity"
        android:label="@string/title_activity_display_message"
        android:parentActivityName="com.young.stepbystepandroid.MainActivity" &gt;
        &lt;meta-data
            android:name="android.support.PARENT_ACTIVITY"
            android:value="com.young.stepbystepandroid.MainActivity" /&gt;
    &lt;/activity&gt;
&lt;/application&gt;
</code></pre>

<p>```</p>

<h3>使用Intent</h3>

<p><em>启动Intent</em>
``` java</p>

<pre><code>Intent intent = new Intent(getApplication(),DisplayMessageActivity.class);
EditText editText = (EditText)findViewById(R.id.edit_message);
String message = editText.getText().toString();
intent.putExtra(EXTRA_MESSAGE,message);
startActivity(intent);
</code></pre>

<p><code>
其中`public static final String EXTRA_MESSAGE = "com.young.stepByStepAndroid.MESSAGE";`
这个是一个显示Intent构造函数第一个参数是Context，可以使用this，因为Activity继承Context；但是推荐使用ApplicationContext防止内存泄漏。
*接收Intent*
</code> java</p>

<pre><code>Intent intent = getIntent();
String message = intent.getStringExtra(
        MainActivity.EXTRA_MESSAGE);

TextView textView = new TextView(this);
textView.setTextSize(40);
textView.setText(message);
</code></pre>

<p>```
代码很明显，不多说什么了。当然在Intent里面附加信息推荐使用<a href="http://developer.android.com/reference/android/os/Bundle.html">Bundle</a>。</p>

<p>看看成果：</p>

<p><img src="https://cloud.githubusercontent.com/assets/5700847/2953446/d6257c5a-da59-11e3-8e67-80bbecb4640f.png" width="360" alt="device-2014-05-13-002646" /></p>

<p><img src="https://cloud.githubusercontent.com/assets/5700847/2953447/d71cdef0-da59-11e3-9d39-e3e5d4de150d.png" width="360" alt="device-2014-05-13-002651" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2048游戏安卓移植版]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/03/22/2048you-xi-an-zhuo-yi-zhi-ban/"/>
    <updated>2014-03-22T00:51:51+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/03/22/2048you-xi-an-zhuo-yi-zhi-ban</id>
    <content type="html"><![CDATA[<p>这几天一直在玩2048游戏，觉得这个游戏很有意思。上次研究了一下源代码于是就写了个‘外挂’(囧)。后来在手机上玩，发现网页版的玩着不爽，于是想着把这个游戏当成基于安卓的html5游戏。于是就看了一下怎么写android的html5游戏。的出结论是基于WebView——在应用中开一个区域显示网页内容，所以这个区域就是一个浏览器了。经过两天的努力算是弄了个<a href="/assets/storage/2048">小样</a>出来。最后还是利用WebView移植到<a href="https://github.com/LanderlYoung/2048_android">安卓平台</a>，使用起来和native app没啥区别。</p>

<!--more-->


<p>不过同时发现一个问题——Android的WebView性能不高。html5游戏用手机的浏览器直接打开一点都不卡，要多流畅就多流畅，一旦打包成apk装到手机上就不行了，越玩越卡。后来加了一个about的页面，这个页面是从页面上面‘落’下来的效果。当这个‘落’的动作变成幻灯片的时候我终于知道了一定是WebView的javascript定时器的问题，WebView的javascript频率有问题。</p>

<p>移植神马的最烦的是浏览器兼容问题，针对每一种分辨路都得写一套css出来。今天有点玩了，列出来写这个小应用学到的东西，具体细节有机会再补充吧。</p>

<ol>
<li>font awesome 的使用，利用font awesome显示矢量图标</li>
<li>div的垂直居中（利用javascript）</li>
<li>about的下落效果（其实在写chrome的插件的时候有用到）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2048游戏的'外挂'代码]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/03/14/2048you-xi-de-slash-wai-gua-slash-dai-ma/"/>
    <updated>2014-03-14T22:12:35+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/03/14/2048you-xi-de-slash-wai-gua-slash-dai-ma</id>
    <content type="html"><![CDATA[<p>这两天<a href="http://gabrielecirulli.github.io/2048/">‘2048’</a>游戏很火，于是我秉承这学习的态度研究了一下他的代码。
本以为使用canvas实现的，后来发现就是普通的html元素，突然觉得开发者还是很厉害的！<br/>
说实话，这个游戏设计得的确很牛。牛的不是代码，是游戏创意！如果发到app store上估计会和flappy bird有的一拼吧。</p>

<!--more-->


<h2>我是邪恶的开始</h2>

<p>因为研究了一下游戏的源代码，突然发现可以很简单的让游戏想开了外挂一样牛叉！</p>

<p>``` cpp
(function(initialNum){</p>

<pre><code>var a = new GameManager(4, KeyboardInputManager, HTMLActuator, LocalScoreManager);
var row = 4;
var column = 4;
for(var i = 0; i &lt; row; i++) {
    for(var j = 0; j &lt; column;j++) {
        tile =  new Tile({x:i, y:j}, initialNum);
        a.grid.cells[i][j] = tile;
    }
}
</code></pre>

<p>})(128);
```</p>

<p>这就是所有'外挂'代码，打开chrome的console。输入进去就可以看到奇迹。。。。</p>

<h2>郑重声明</h2>

<p>这只是一个个人的无聊作品，如果因为这个东西让你丧失了对本游戏的兴趣，请无视这段代码！</p>
]]></content>
  </entry>
  
</feed>
