<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: android | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/tags/android/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2016-01-11T00:43:50+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中的WakeLock使用]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/10/31/androidzhong-de-wakelockshi-yong/"/>
    <updated>2014-10-31T10:08:26+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/10/31/androidzhong-de-wakelockshi-yong</id>
    <content type="html"><![CDATA[<p>android系统在手机屏幕锁定之后一般会让手机休眠，以提高电池的使用时间。但是休眠意味着CPU频率降低，有时候可能需要做一些需要大量运算的任务，所以需要唤醒CPU。WakeLock可以做到这一点。</p>

<!--more-->


<h3>WakeLock的创建是：</h3>

<pre><code class="java">
PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);

Wakelock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,

        "MyWakelockTag");
</code></pre>

<p>另外如果要使用WakeLock需要在Manifest中添加如下权限</p>

<p><code>&lt;uses-permission android:name="android.permission.WAKE_LOCK" /&gt;</code></p>

<h3>WakeLock的等级</h3>

<p>上面的第一个参数是WakeLock levelAndFlag，分别代表了一种WakeLock等级，并且可以通过「或」位操作组合使用。他们是：</p>

<ol>
<li><p>PARTIAL_WAKE_LOCK：保证CPU保持高性能运行，而屏幕和键盘背光（也可能是触摸按键的背光）关闭。一般情况下都会使用这个WakeLock。</p></li>
<li><p>ACQUIRE_CAUSES_WAKEUP：这个WakeLock除了会使CPU高性能运行外还会导致屏幕亮起，即使屏幕原先处于关闭的状态下。</p></li>
<li><p>ON_AFTER_RELEASE：如果释放WakeLock的时候屏幕处于亮着的状态，则在释放WakeLock之后让屏幕再保持亮一小会。如果释放WakeLock的时候屏幕本身就没亮，则不会有动作。</p></li>
</ol>


<p>被<strong>弃用</strong>的WakeLock：</p>

<ol>
<li><p>SCREEN_DIM_WAKE_LOCK：保证屏幕亮起，但是亮度可能比较低。同时键盘背光也可以不亮。</p></li>
<li><p>SCREEN_BRIGHT_WAKE_LOCK ：保证屏幕全亮，同时键盘背光也亮。</p></li>
<li><p>FULL_WAKE_LOCK：表现和SCREEN_BRIGHT_WAKE_LOCK 类似，但是区别在于这个等级的WakeLock使用的是<strong>最高亮度</strong>！</p></li>
</ol>


<p>这三个Level在API17被弃用。被弃用说明肯定有替代品吗，上面三个类型的作用无非就是保持屏幕长亮。所以推荐是用WindowFlag<code>WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON</code>。使用方法是：</p>

<ol>
<li><p>在Activity中： <code>getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</code></p></li>
<li><p>甚至可以在布局中添加这个属性：<code>android:keepScreenOn="true"</code></p></li>
</ol>


<p>被<strong>隐藏</strong>的WakeLock：</p>

<p>android中的部分api并不对用户应用开放，他们通过在注释中加入<code>{@hide}</code>来注明。但是在SDK提供的源代码中是可以看到的。</p>

<ul>
<li>WAIT_FOR_PROXIMITY_NEGATIVE：用于和接近传感器配合使用，来实现电话应用中打电话时可以使屏幕黑掉，手机离开时又能使屏幕亮起来的功能。acqure的时候屏幕会暗下来，release之后屏幕会亮。其值是32（int）。虽然被hide起来，但是感觉这个超实用的好吗！！！为啥要hide起来。。。「话说在API21 上终于开放了（开放这么晚有个屁用啊(╯‵□′)╯︵┻━┻）」经试验，不过newWakeLock的时候flag直接用32代替是可以创建这个等级的WakeLock的，但是因为是非开放API，不能保证第三方OEM修改这个代码实现！因此使用起来并不安全。「说的好像开放的API第三方OEM就不会乱改一样。。。(╯‵□′)╯︵┻━┻」</li>
</ul>


<h3>WakeLock的使用：</h3>

<ul>
<li><p>获取WakeLock：</p>

<ol>
<li><p><code>void acquire()</code>:获得WakeLock</p></li>
<li><p><code>void acquire(long timeOut)</code>:获得WakeLock timeOut时长，当超过timeOut之后系统自动释放WakeLock。</p></li>
</ol>
</li>
<li><p>释放WakeLock：<code>release()</code></p></li>
<li><p>判断是否已经获取WakeLock：<code>boolean isHeld()</code></p></li>
<li><p><code>void setReferenceCounted(boolean value)</code>：是否使用引用计数。类似于垃圾回收策略，只是把垃圾回收改成了WakeLock回收。如果value是true的话将启用该特性，如果一个WakeLock acquire了多次也必须release多次才能释放掉。但是如果释放次数比acquire多则会抛出<code>RuntimeException("WakeLock under-locked " + mTag)</code>异常。<strong>默认是开启了引用计数的！</strong></p></li>
</ul>


<h3>PowerManager的几个实用方法</h3>

<ol>
<li><p><code>boolean PowerManager::isScreenOn ()</code>判断屏幕是否亮着（不管是暗的dimed还是正常亮度），在API20被弃用，推荐<code>boolean PowerManager::isInteractive ()</code></p></li>
<li><p><code>void PowerManager::goToSleep(long time)</code>time是时间戳，一般是System.currentTimeMillis()+timeDelay。强制系统立刻休眠，需要Manifest中添加权限<code>"android.permission.DEVICE_POWER"</code>。按下电源键锁屏时调用的就是这个方法。</p></li>
<li><p><code>void PowerManager::wakeUp(long time)</code>与上面对应。参数含义，所需权限与上同。按下电源键解锁屏幕时调用的就是这个方法。</p></li>
<li><p><code>void PowerManager::reboot(String reason)</code>重启手机，reason是要传给linux内核的参数，比如“recovery”重启进recovery模式，“fastboot”重启进fastboot模式。需要权限<code>"android.permission.REBOOT"</code>。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java(Android)中线程池的使用]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong/"/>
    <updated>2014-09-23T17:39:40+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/09/23/javazhong-xian-cheng-chi-de-shi-yong</id>
    <content type="html"><![CDATA[<p>java SE5提供了<code>java.util.concurrent.Executors</code>类来实现线程池的功能。
<em>Thinking in Java</em> 中这么解释Executors：</p>

<blockquote><p><code>Executors</code>允许你执行异步的任务（task）而不用显式的去管理线程的生命周期。</p></blockquote>

<p>可以说Executors是线程们的管理者，让线程们的生存方式从<strong>放养</strong>变成了<strong>圈养</strong>。Executors来处理一次能同时运行多少个线程，哪个线程在哪个线程的后面执行。总的来说Executors之于线程就像操作系统止于进程一样——管理者与被管理者的关系。</p>

<!--more-->


<p><strong>new Thread的弊端如下：</strong></p>

<ol>
<li><p>每次new Thread新建对象性能差。</p></li>
<li><p>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</p></li>
<li><p>缺乏更多功能，如定时执行、定期执行、线程中断。</p></li>
</ol>


<p><strong>相比new Thread，Java提供的四种线程池的好处在于：</strong></p>

<ol>
<li><p>重用存在的线程，减少对象创建、消亡的开销，性能佳。</p></li>
<li><p>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</p></li>
<li><p>提供定时执行、定期执行、单线程、并发数控制等功能。</p></li>
</ol>


<p>（上述比较摘自：<a href="http://www.trinea.cn/android/java-android-thread-pool/">http://www.trinea.cn/android/java-android-thread-pool/</a> ）</p>

<p>Executors的使用静态方法来创建相应的<code>ExecutorService</code>接口实现，如下：</p>

<ul>
<li><code>Executors.newCachedThreadPool()</code></li>
<li><code>Executors.newFixedThreadPool()</code></li>
<li><code>Executors.newScheduledThreadPool()</code></li>
<li><code>Executors.newSingleThreadExecutor()</code></li>
</ul>


<p> 这些线程池分别具有不同的能力：
 （Java Concurrency in Pratice——java编程实践，如下解释）</p>

<ul>
<li><p>newFixedThreadPool：创建一个定长的线程池，每提交一个任务就创建一个线程，直到达到池的最大长度，这时线程池会保持长度不再变化（如果一个线程由于未预期的Exception而结束，线程池会补充一个新线程）。</p></li>
<li><p>newCachedThreadPool：创建一个可缓存的线程池，如果当前线程池的长度超过了处理的需要时，它可以灵活的回收空闲的线程，当需要增加时，它可以灵活的添加新的线程，而不会对池的长度作任何限制。</p></li>
<li><p>newSingleThreadExecutor：创建一个单线程化的executor，它只创建唯一的worker线程来执行任务，如果这个线程异常结束，会有另一个取代它。executor会保证任务依照任务队列规定的顺序（FIFO，LIFO，优先级）执行。</p></li>
<li><p>newScheduledThreadPool：创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer。</p></li>
</ul>


<h3>ExecutorService的使用</h3>

<p><code>ExecutorService</code>接口继承自Executor的接口定义，他提供了一个线程池应该实现的方法定义，包括运行/提交新任务的方法，结束任务的方法，等等。
<code>ExecutorService</code>的接口有：</p>

<p><strong>提交任务</strong>：</p>

<ul>
<li><p><code>execute</code>（该方法继承自Executor）提交一个runnable接口封装的task，没有返回值</p></li>
<li><p><code>submit</code> 提交一个Callable或者Runnable接口封装的任务，返回一个Feature。</p></li>
<li><p><code>invokeAll</code>传入一个task的容器，执行其包含的所有task。</p></li>
<li><p><code>invokeAny</code>传入一个task的容器，只要其中一个task异常终止，就结束其他task（如果还没执行就不再执行）。</p></li>
</ul>


<p><strong>终止线程池</strong>：</p>

<ul>
<li><p><code>shotdown</code>线程池停止接受新的task，所有已有task执行完后线程池随即关闭</p></li>
<li><p><code>shutdownNow</code>立即终止线程池内的所有task，关闭线程池</p></li>
</ul>


<p><strong>重要的一点</strong>：因为只要有一个非Daemon线程运行着，就会阻止JVM的正常退出。所以线程池一定要记得shutdown！</p>

<p>所以向ExecutorService提交的任务可以是通过<code>Runnable</code>或者<code>Callable</code>接口封装的，其中Callable接口带有一个类型参数，表示返回值的类型。Runable可以使用execute方法，提交。但是Runnable和Callable都可以使用submit方法提交。execute方法没有返回值，submit方法会返回一个Future<T>类型，可以查看任务的执行状态以及获取任务的返回）。所以当你想要一个任务完成时返回一个返回值，submit将是你的不二之选（不要三四千，不要一两千，只要998，submit抱回家）。</p>

<p><strong>关于Future<T></strong></p>

<p>Future功能强大，提供了对任务的各种操作：</p>

<ul>
<li><p><code>isDone()</code> 返回任务是否已经执行完成</p></li>
<li><p><code>get()</code>返回任务的返回值，如果调用get的时候任务还没有完成，则会阻塞知道任务完成</p></li>
<li><p><code>get(long timeout, TimeUnit unit)</code>同上，但是多了个参数，表示阻塞的最大时长。如果在设定的最大阻塞时长内没有指定任务没有顺利结束并返回结果，该方法会抛出一个<code>java.util.concurrent.TimeoutException</code>。</p></li>
<li><p><code>cancel(boolean mayInterruptIfRunning)</code> 尝试去取消一个任务的执行，如果一个任务已经结束，或者已经被取消，或者因为一些什么原因不能够取消，则会取消失败，同时返回false。如果一个任务还没有开始执行就被取消了，那么它将不再执行。如果这个方法被调用的时候，任务正在执行，则将由参数<code>mayInterruptIfRunning</code>决定是否终止正在运行的task。</p></li>
<li><p><code>isCancelled()</code> 返回任务是否已经被取消</p></li>
</ul>


<p>了解过强大的Future是否觉得execute可以去死了，连个Future都返回不了，事实上并非如此，因为submit最终调用的还是execute-_-其实现方法是给execute传入一个RunnableFuture接口的实例（在标准库里有一个很好的实现叫FutureTask），RunnableFuteure接口定义了一个觉有Future功能的Runnalbe。想自定义Future就可以通过这种方式。</p>

<p>submit也是可以传入Runnable的，当传入Runnable时会怎样呢：</p>

<ul>
<li><p>当使用 <code>submit(Runnable)</code>时，返回一个<code>Future&lt;?&gt;</code>，它的get方法会返回null，除此之外其他方法调用表现正常。</p></li>
<li><p>当使用<code>submit(Runnable task, T result)</code>时，返回一个Future<T>，它的get方法会返回result。就好比task是一个会返回result的Callable。</p></li>
</ul>


<p>另外一个小tip就是Executors提供了Runnable转Callabe的静态方法：</p>

<ul>
<li><p><code>public static &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result)</code>将Runnable转换成能返回result的Callable接口</p></li>
<li><p><code>public static Callable&lt;Object&gt; callable(Runnable task)</code>将Runnable转换成返回null的Callable接口</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
