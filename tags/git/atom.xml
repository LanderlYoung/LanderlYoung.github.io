<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Git | Young_Blog]]></title>
  <link href="http://LanderlYoung.github.io/tags/git/atom.xml" rel="self"/>
  <link href="http://LanderlYoung.github.io/"/>
  <updated>2014-10-15T10:24:00+08:00</updated>
  <id>http://LanderlYoung.github.io/</id>
  <author>
    <name><![CDATA[LanderlYoung]]></name>
    <email><![CDATA[landerlyoung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git中创建tag和release]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/05/12/gitzhong-chuang-jian-taghe-release/"/>
    <updated>2014-05-12T21:28:57+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/05/12/gitzhong-chuang-jian-taghe-release</id>
    <content type="html"><![CDATA[<p>今天开始学习Android Design，也详细了解一下Android的应用开发，方便暑假的实习。于是打算创建一个github的仓库，记录学习的过程。然后想到每学习一个新功能都应该有一个tag（或者叫release）不然别人看你的仓库的时候怎么知道学习的步步过程。然后就学习了一下git tag的相关内容，如下：</p>

<h2>创建</h2>

<ul>
<li><code>git tag -a &lt;tagname&gt; -m "comment"</code> 或者<code>git tag -a &lt;tagname&gt;</code>和commit差不多只是多了一个tagname，使用后面那个命令会打开一个文本编辑器写入comment信息。总的来说 和commit是一样的。</li>
<li>轻量级tag，输入<code>git tag &lt;tagname&gt;</code>。</li>
</ul>


<!--more-->


<h2>列出所有tag</h2>

<ul>
<li><code>git tag</code>会直接列出当前可用tag。</li>
<li><code>git tag -l "pattern"</code>列出tagname符合正则表达式的所有tag。</li>
</ul>


<h2>查看tag信息</h2>

<ul>
<li><code>git show &lt;tagname&gt;</code>会列出tag的相关信息，包括tagname，打tag时写入的comment信息，以及diff信息。</li>
</ul>


<h2>push tag</h2>

<ul>
<li><code>git push origin &lt;tagname&gt;</code></li>
<li><code>git push origin --tags</code>push 所有tags</li>
</ul>


<h2>删除tag</h2>

<ol>
<li>删除本地tag<code>git tag -d &lt;tagname&gt;</code>。</li>
<li>删除远端tag<code>git push origin :refs/tags/&lt;tagname&gt;</code>, 这个命令和删除远端branches很神似。</li>
</ol>


<p>以上只说了一些简单的操作，还有是用签名的tag，这些就比较复杂一点了，更多内容请参考：<a href="http://git-scm.com/book/en/Git-Basics-Tagging">git-scm.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用git下载单个分支]]></title>
    <link href="http://LanderlYoung.github.io/blog/2014/01/06/yong-gitxia-zai-dan-ge-fen-zhi/"/>
    <updated>2014-01-06T16:45:34+08:00</updated>
    <id>http://LanderlYoung.github.io/blog/2014/01/06/yong-gitxia-zai-dan-ge-fen-zhi</id>
    <content type="html"><![CDATA[<p>最近在玩octpress。开始一直在我的Debian系统里面玩的，后来因为一夹些软件必须在windows下面跑，只能在虚拟机里写博客了。然后就打算把github上的网页项目下载下来。但是这个项目有点不一样。github.io的博客项目有两个分支，master和source;其实他们根本不是分支的概念，没有什么交集的。在octpress项目文件夹里面是source分支里的内容，除了_deploy目录内的东西是用gitignore忽略的，_deploy里面的内容就是master分支的东西了。</p>

<p>所以我的需求是把两个分支单独下载下来，开始的方案失败（其实是不完美），后来搜了好多东西在stackoverflow上面找到了解决方案。</p>

<!--more-->


<hr />

<p> 1.新建一个文件夹，假设名字是blog</p>

<p> 2.cd进去输入</p>

<pre>
    git init
</pre>


<p> 3.配置git，比如</p>

<pre>
    git remote add origin git@xxx
</pre>


<p> 4.然后是</p>

<pre>
    git fetch origin
</pre>


<p>   把仓库的状态取回来</p>

<p> 5.因为_deploy目录里面也是这个项目，所以索性把.git目录复制进去</p>

<pre>
    cp -r .git _deploy/
</pre>


<p> 6.然后是下载分支，可以使用</p>

<pre>
    git branch -b branch_name origin/source
</pre>


<p>   从source分支新建一个分支。或者简单点，用：</p>

<pre>
    git branch -t origin/source
</pre>


<p>   直接吧source分支搞下来，其作用等同于</p>

<pre>
    git branch -b source origin/source
</pre>


<p> 7.cd 到_deploy目录，干同样的事</p>

<pre>
    git branch -t origin/source
</pre>


<p>这样两个分支就放到了不同的目录里面，接着按照octpress官方教程安装jekyll和rake等就可以开始博客了！</p>

<p>对了，顺便提一句。Debian里不允许使用gem安装ruby软件，只能使用apt安装bundler之类的东西。不过我在fedoral和基于Ubuntu的Deepin Linux上都没发现这个问题。</p>
]]></content>
  </entry>
  
</feed>
